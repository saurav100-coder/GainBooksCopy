<?xml version="1.0"?>
<doc>
<assembly>
<name>
DataFunctions
</name>
</assembly>
<members>
<member name="T:DataFunctions.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DataFunctions.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DataFunctions.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:DataFunctions.DataFunctions.GetDatafromCSV1(System.String)">
 <summary>
 To get the data of .csv file to a datatable using comma split
 </summary>
 <param name="csvpath">In this the full path with name of the .csv file is given.</param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.ArrayAppendSqlParameter(System.Data.SqlClient.SqlParameter[]@,System.Data.SqlClient.SqlParameter,System.Boolean)">
 <summary>
 Add a control element at the last of an array
 </summary>
 <param name="ArrayName"> Array to be added</param>
 <param name="LastValue">SqlParameter element added at last position </param>
 <param name="IgnoreIfExists" >Ignore if item already exists in the array</param>
 <returns> Output array after adding new control </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.BreakServerDataBase(System.String)">
 <summary>
 Break String of serverdatabase string into a list of string where index item (0) is Sql Server Name and index item (1) is database name 
 </summary>
 <param name="ServerDataBase">Full identifier of database with server</param>
 <returns>Return a list of server name and data base name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.BreakFullTableIdentfier(System.String@,System.Boolean)">
 <summary>
 Break String of serverdatabase string into a list of string where index item (0) is Sql Server Name and index item (1) is database name ,item(2)="DBO",item[3]=TableName
 </summary>
 <param name="SqlTableFullIdentifier">Full identifier of database with server</param>
 <returns>Return a list of server name and data base name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.OpenSqlConnection(System.String,System.Int32,System.Int32)">
 <summary>  
 To open new SQL connection
 </summary>
 <param name="ServerDataBase">Full identifier of a database eg. server1.database1</param>
 <param name="MaxPoolSize" >Max pool size connections at a time default is 100</param>
 <param name="ConnectionTimeOut" >Connection time out in seconds defau</param>
 <returns>An new sql connection</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveSquareBrackets(System.String)">
 <summary>
 Remove square brackets from serever or database name or both.
 </summary>
 <param name="ServerOrDatabaseName">Server Or DatabaseName</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddSquareBrackets(System.String)">
 <summary>
 Add square brackets to serever or database name or both.
 </summary>
 <param name="ServerOrDatabaseName">Server Or DatabaseName</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.IsLocalServer(System.String)">
 <summary>
 Check server name is local or not
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.OpenSqlConnection(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 To open new SQL connection
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="DataBaseName">Database name</param>
 <param name="MaxPoolSize" >Max pool size connections at a time default is 100</param>
 <param name="ConnectionTimeOut" >Connection time out in seconds defau</param>
 <returns>An Sql connection</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AttachDataBase(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Attach a database to server
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc. </param>
 <param name="DataBaseFullName">Full path of database name</param>
 <param name="DeleteMessageAlert">Delete message alert if database already attached to server</param>
 <param name="NetworkedFolder" >True if file is attached from a Networked Computer</param>
 <returns>Completion flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AttachDataBase(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Attach a database to server
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="DataBaseFolder">Folder name where database exists</param>
 <param name="DataBaseName">Name of Database</param>
 <param name="DeleteMessageAlert">Delete message alert if database already attached to server</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DetachDataBase(System.String,System.String)">
 <summary>
 Detach connected database to the server
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="DataBaseName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateDataBase(System.String,System.String)">
 <summary>
 To create a new database 
 </summary>
 <param name="SqlServer">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="FullFileName">Database name with path</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateDataBase(System.String,System.String,System.String)">
 <summary>
 To create a new database 
 </summary>
 <param name="SqlServer">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="DataBaseFolder">DataBaseFolder name</param>
 <param name="DataBaseName">DataBase Name</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CopyDatabase(System.String,System.String,System.String,System.String)">
 <summary>
 Copy sql database to another location
 </summary>
 <param name="SourceFolder"></param>
 <param name="SourceDatabaseName"></param>
 <param name="TargetFolder"></param>
 <param name="TargetDatabaseName"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ServerExists(System.String,System.String)">
 <summary>
 To check wether a server name contained by local server
 </summary>
 <param name="LocalServer1">Local Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="FindServerName">Server Name as string to be searched in local server</param>
 <returns>Existing flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DataBaseExists(System.String,System.String)">
 <summary>
 To check wether a database name contained by server
 </summary>
 <param name="ServerName">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="FindDataBaseName">Database name to be checked by existence</param>
 <returns>Existing Flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TableExists(System.String,System.String)">
 <summary>
 To check wether a table name exists in a database 
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or 0_srv_0.0_mdf_0 format</param>
 <param name="FindTableName">Table name to be searched</param>
 <returns>Flag for existence</returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.TableExists(System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 To check wether a table name exists in a sql connection
 </summary>
 <param name="LSqlConnection ">Opened sql connection</param>
 <param name="FindTableName">Table name to be searched</param>
 <returns>Flag for existence</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TableExists(System.String,System.String,System.String)">
 <summary>
 To check wether a table name exists in a database
 </summary>
 <param name="SQServer">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="SqDataBase">Sql Database name</param>
 <param name="FindTableName">Table name to be searched</param>
 <returns>Flag for existence</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetTablesInSqlDataBase(System.String,System.String)">
 <summary>
 To check wether a table name exists in a database
 </summary>
 <param name="SQServer">Server name as constant or as in the convention 0_srv_0 ,1_srv_1 etc.</param>
 <param name="SqDataBase">Sql Database name</param>
 <returns>Flag for existence</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LinkServer(System.Boolean)">
 <summary>
 To add a remote server to local server
 </summary>
 <param name="Detach">True if Remote server droped without prompting if already linked </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropServer(System.String,System.String)">
 <summary>
 To drop existing Linked server
 </summary>
 <param name="LocalServer1">Local server name</param>
 <param name="RemoteServerName ">Remote server name to be linked to local server</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSql(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or 0_srv_0.0_mdf_0 format</param>
 <param name="Ltable">Sql Table names of  FROM CLAUSE . if SeverDataBase is blank then these names must be full qualifier table names eg. (Server1.SQLBASE1.DBO.TABLE1) or from the mapped table names such as "_srv_0._mdf_0.table1 where srv0 is a key of global collection of servers and mdf0 is a key of global collection of databases</param>
 <param name="LfieldList">Comma separated field list to get (*) for all</param>
 <param name="LJoinStmt" >SQL JOIN CLAUSE of querry</param>
 <param name="Lcondition">String condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <param name="RowStatusFlag"></param>
 <param name="NoOfRows"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSql(System.String,System.String,System.String,System.String,System.Collections.Hashtable,System.String,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or 0_srv_0.0_mdf_0 format</param>
 <param name="Ltable">Sql Table names of  FROM CLAUSE . if SeverDataBase is blank then these names must be full qualifier table names eg. (Server1.SQLBASE1.DBO.TABLE1) or from the mapped table names such as "_srv_0._mdf_0.table1 where srv0 is a key of global collection of servers and mdf0 is a key of global collection of databases</param>
 <param name="LfieldList">Comma separated field list to get (*) for all</param>
 <param name="LJoinStmt" >SQL JOIN CLAUSE of querry</param>
 <param name="hcondition">HashTable condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <param name="RowStatusFlag"></param>
 <param name="NoOfRows"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSql(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="Mtrans" >Sql Transanction</param>
 <param name="Ltable">Sql Table names of  FROM CLAUSE . if SeverDataBase is blank then these names must be full qualifier table names eg. (Server1.SQLBASE1.DBO.TABLE1) or from the mapped table names such as "_srv_0._mdf_0.table1 where srv0 is a key of global collection of servers and mdf0 is a key of global collection of databases</param>
 <param name="LfieldList">Comma separated field list to get (*) for all</param>
 <param name="LJoinStmt" >SQL JOIN CLAUSE of querry</param>
 <param name="Lcondition">String condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <param name="RowStatusFlag"></param>
 <param name="NoOfRows"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSql(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.Collections.Hashtable,System.String,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="Mtrans" >Sql Transanction</param>
 <param name="Ltable">Sql Table names of  FROM CLAUSE . if SeverDataBase is blank then these names must be full qualifier table names eg. (Server1.SQLBASE1.DBO.TABLE1) or from the mapped table names such as "_srv_0._mdf_0.table1 where srv0 is a key of global collection of servers and mdf0 is a key of global collection of databases</param>
 <param name="LfieldList">Comma separated field list to get (*) for all</param>
 <param name="LJoinStmt" >SQL JOIN CLAUSE of querry</param>
 <param name="hcondition">HashTable condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <param name="RowStatusFlag"></param>
 <param name="NoOfRows"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromTableClass(System.Object@,System.String@,System.String,System.String,System.String,System.Object,System.Collections.Hashtable,System.Int32,System.Boolean)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="PrimaryColumns" >Comma separated fields for datatable primarykey</param>
 <param name="Lcondition">String condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="NoOfRows" ></param>
 <param name="QueryWithJoin"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDistinctDataFromSql(System.Object@,System.String@,System.String@,System.Boolean,System.String)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="FieldNames" >Comma separated fieldNames to be fetched </param>
 <param name="PrimaryColumns" >Comma separated fields for datatable primarykey</param>
 <param name="AllColumns"></param>
 <param name="Lorder" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDistinctDataFullSqlName(System.String@,System.String@,System.String@,System.Boolean,System.String)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="FullSqlName" >Class object of Sql table</param>
 <param name="FieldNames" >Comma separated fieldNames to be fetched </param>
 <param name="PrimaryColumns" >Comma separated fields for datatable primarykey</param>
 <param name="AllColumns"></param>
 <param name="Lorder" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromTableClass(System.Object@,System.String,System.Collections.Hashtable,System.Boolean,System.String,System.String,System.String,System.String,System.Object,System.Collections.Hashtable,System.Int32@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="Hcondition" > condition as hashtable after Where Clause </param>
 <param name="PrimaryColumns" >Comma separated fields for datatable primarykey</param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CheckIfDuplicateExists(System.Object,System.String,System.Object,System.String@)">
 <summary>
 To check if duplicate value exists for a particular column in a table as per given condition
 </summary>
 <param name="clsTableclass">Table class of table in which value has to be searched </param>
 <param name="colname">Name of column whose value is to be searched</param>
 <param name="colValue">Value of column which needs to be check for duplicate</param>
 <param name="DisAllowDuplicateCondition">additional condition which needs to be applied in query while searching for duplicate</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataQuery(System.Object@,System.String@,System.String@,System.String@,System.Int32@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="Lcondition">String condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="NoOfRows" ></param>
 <param name="QueryWithJoin" ></param>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.String@,System.String,System.String@,System.String@,System.Object@,System.Collections.Hashtable@,System.Int32@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="MyTrans" >Sql Transanction</param>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="Lcondition">String condition after Where Clause </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="NoOfRows" ></param>
 <param name="QueryWithJoin" ></param>
 <param name="PrimaryColumns" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableObject(System.Object@,System.Int32,System.Object[],System.Collections.Hashtable,System.Boolean@,System.String@)">
 <summary>
 To get data row from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="SearchKeyValue" >SearchKeyValue to be searched</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="QueryWithJoin" >true if querry with join</param>
 <param name="SearchFieldName" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordFromSql(System.String,System.Object@,System.Object[],System.Collections.Hashtable,System.Boolean@,System.String@)">
 <summary>
 To get data row from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="SearchKeyValue" >SearchKeyValue to be searched</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="QueryWithJoin" >true if querry with join</param>
 <param name="SearchFieldName" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableObject(System.Object@,System.Collections.Hashtable@,System.Object[]@,System.Collections.Hashtable@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="WhereClause" >A hash table having the conditions of where clause , key is field name,value is fieldvalue,logical gate=And</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableObject(System.Object@,System.String@,System.Object[]@,System.Collections.Hashtable@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="WhereClause" >A hash table having the conditions of where clause , key is field name,value is fieldvalue,logical gate=And</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Int32,System.Object,System.Collections.Hashtable,System.Boolean@,System.String@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="MyTrans" >Transanction</param>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="SearchKeyValue" >Primary key value to be searched</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="QueryWithJoin" >True if QueryWithJoin</param>
 <param name="SearchFieldName" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.String,System.Object,System.Collections.Hashtable,System.Boolean@,System.String@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="MyTrans" >Transanction</param>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="SearchKeyValue" >SearchKeyValue to be searched</param>
 <param name="aClsObject" >An array of all classobjects if there values are assigned or element of expression to any column of  datatable</param>
 <param name="HashPublicValues" >A hashtable with keys of all public variables of the form</param>
 <param name="QueryWithJoin" >True if QueryWithJoin</param>
 <param name="SearchFieldName" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSqlIdentifier(System.String,System.String,System.String,System.Collections.Hashtable,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="SqlTableIdentifier" >Full identifier of a sqltable with server name eg. server0.database0.dbo.table or 0_srv_0.0_mdf_0.dbo.table format</param>
 <param name="LfieldList">Comma separated field list to get (*) for all</param>
 <param name="LJoinStmt" >SQL JOIN CLAUSE of querry</param>
 <param name="Hcondition">Condition as hashtable,where key is field and value is condition value with equality operator and logical gate AND </param>
 <param name="LFilter" >Filter criteria added in where clause</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="RecordPosition">Record posintion  F=FirstRecord,L=LastRecord, or "*"=All</param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSql(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="FullSqlIdentifier" >Full identifier of a database with server name eg. server0.database0 or 0_srv_0.0_mdf_0 format</param>
 <param name="LWhere" ></param>
  <param name="Lorder">Comma separated field string after Order by Clause</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSqlIdentifier(System.String,System.String,System.String,System.String@,System.Boolean@)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="SqlTableIdentifier" >Full identifier of a sqltable with server name eg. server0.database0.dbo.table or 0_srv_0.0_mdf_0.dbo.table format</param>
 <param name="PrimaryColumns"></param>
 <param name="Lcondition"></param>
 <param name="RowStatusFlag"></param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSqlIdentifier(System.String,System.Collections.Hashtable@,System.String,System.String)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="SqlTableIdentifier" >Full identifier of a sqltable with server name eg. server0.database0.dbo.table or 0_srv_0.0_mdf_0.dbo.table format</param>
 <param name="Hcondition"></param>
 <param name="Lorder"></param>
 <param name="PrimaryColumns"></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetNewRowTemplateFromSqlIdentifier(System.String)">
 <summary>
 To get data table from Sql Table on specified order and conditions 
 </summary>
 <param name="SqlTableIdentifier" >Full identifier of a sqltable with server name eg. server0.database0.dbo.table or 0_srv_0.0_mdf_0.dbo.table format</param>
 <returns>DatRow  tempplate</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetServerDataBase(System.String,System.Boolean)">
 <summary>
 To get a  string of  server.database format from  0_srv_0.0_mdf_0 or srv1.mdf1 fromat
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or 0_srv_0.0_mdf_0 format </param>
 <param name="WithBrackets" >True, if servername will be enclosed in square brackets
 </param>
 <returns>Comma Separated string of SQL databases</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ConvertFromSrv0Mdf0_1(System.String,System.Boolean)">
 <summary>
 To convert  a querry string in which tables are in the format (0_srv_0.0_mdf_0.dbo.table1)  are converted into format (server0.database0.dbo.table0)  
 </summary>
 <param name="StringToConvert">String having tables in the format (0_srv_0.0_mdf_0.dbo.table1) </param>
 <param name="WithBrackets" >True, if servername will be enclosed in square brackets</param>
 <returns>String of SQL databases with servers</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ConvertFromSrv0Mdf0(System.String,System.Boolean)">
 <summary>
 To convert  a querry string in which tables are in the format (0_srv_0.0_mdf_0.dbo.table1)  are converted into format (server0.database0.dbo.table0)  
 </summary>
 <param name="StringToConvert">String having tables in the format (0_srv_0.0_mdf_0.dbo.table1) </param>
 <param name="WithBrackets" >True, if servername will be enclosed in square brackets</param>
 <returns>String of SQL databases with servers</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ConvertFromSrv0(System.String,System.Boolean)">
 <summary>
 To convert  a server string in which server name is in the format (_srv_0)  are converted into fixed name  
 </summary>
 <param name="SeverString">Server string in the format 0_srv_0 or fixed servername </param>
 <param name="WithBrackets" >True, if servername will be enclosed in square brackets</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ConvertFromMdf0(System.String,System.Boolean)">
 <summary>
 To convert  a mdf name string in which database name is in the format (mdf0)  are converted into fixed name  
 </summary>
 <param name="MdfString">database string in the format 0_mdf_0 or fixed databasename</param>
 <param name="WithBrackets" >True, if databasename will be enclosed in square brackets</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSqlFixedRows_old(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Int32@,System.Int32,System.Int32@,System.String,System.String,System.Boolean@)">
 <summary>
 To get datatable of fixed rows from sql table on specified order and conditions 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format , if space or used table names are full identifier then this will extracted from full table names</param>
 <param name="Ltable">Sql Table names (For more than one table ,comma should be used as delimiter,If serverdatabase="" ,Table names must be full identifier ,such as SQLBase1.DBO.Table1 ,SQLBase2.DBO.Table3 etc. or  mdf0.table1,mdbf3.table2,mdf4.table2 ,where mdf0,mdf3,mdf4 are the keys of a collection having databasenames</param>
 <param name="LfieldList">Comma separated fields list to get (*) for all</param>
 <param name="LJoinStmt">SQL Join Clause of querry</param>
 <param name="Lcondition">String condition after Where Clause</param>
 <param name="Lfilter">Filter criteria to get page offset value within the above condition</param>
 <param name="Lorder">Comma separated field string after Order by Clause</param>
 <param name="StartRowPostion ">Rows count in the main table from top to the start point on this condition and filter criteria</param>
 <param name="NoOfRows">No of rows to be populated</param>
 <param name="TotalRows  ">Total Rows in the main table on this condition and filter criteria, calculated if -1 passed </param>
 <param name="PrimaryCols">Comma separated string of data table primary columns</param>
 <param name="TableAlias" ></param>
 <param name="RowStatusFlag" ></param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromSqlFixedRows(System.Object@,System.Int32@,System.Int32,System.String)">
 <summary>
 To get datatable of fixed rows from sql table on specified order and conditions 
 </summary>
 <param name="TableClass" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format , if space or used table names are full identifier then this will extracted from full table names</param>
 <param name="StartRowPostion">Sql Table names (For more than one table ,comma should be used as delimited,If serverdatabase="" ,Table names must be full identifier ,such as SQLBase1.DBO.Table1 ,SQLBase2.DBO.Table3 etc. or  mdf0.table1,mdbf3.table2,mdf4.table2 ,where mdf0,mdf3,mdf4 are the keys of a collection having databasenames</param>
 <param name="RowsToFetch">No. of rows to fetch</param>
 <param name="PrimaryColumns" >Comma separated fields for primary columns</param>
 <returns>Data Table Object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeyPlus(System.Data.DataTable@,System.String,System.String,System.Int32)">
 <summary>
 To get increamental last key of a data table
 </summary>
 <param name="LDataTable">Data table from which lastkey found</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="Prefix">Prefix of lastkey</param>
 <param name="LastKeyFieldSize">Size of the keyfield </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFinalFieldsValuesOneTable(System.Object@,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Set final values of  currdt or currrow  of TableClass object according to InterFieldValues.
 </summary>
 <param name="clsObject">TableClass object after defining FieldsFinalValues property</param>
 <param name="AssignValueToField"></param>
 <param name="OnlyEmpty"></param>
 <param name="StartRowNo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFinalFieldsValues(System.Object[]@,System.Collections.Hashtable)">
 <summary>
 Set final values of  currdt or currrow  of an array of TableClass object according to InterFieldValues.
 </summary>
 <param name="clsObject">An array of TableClass object after defining FieldsFinalValues property for each table class.</param>
 <param name="HashPublicValues" >A hashtable having keys as variablenames and values are variable's values used in expressions to assign fieldvalues</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetTableClassInstanceByName(System.Object[]@,System.String)">
 <summary>
 Get table class instance by name.
 </summary>
 <param name="TableClassArray"></param>
 <param name="InstanceName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetClassInstanceByName(System.Object[]@,System.String)">
 <summary>
 Get ClassInstance from an array of instances.
 </summary>
 <param name="ClassArray"></param>
 <param name="InstanceName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AutoIncreaseInfSno(System.Object@,System.String,System.String,System.String)">
 <summary>
 This Function returns an auto increased integer value for a pertcular column in a table as per given condition
 </summary>
 <param name="aTableClass">Tableclass of table in which value has to be searched</param>
 <param name="columnName"> Name of the column whose value is to be searched</param>
 <param name="WhereClause">Additional condition which needs to be applied in query for searching.</param>
 <returns>This function returns an Integer value</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.EvalFieldAssignExpression(System.String,System.Object[],System.Collections.Hashtable,System.Object[])">
 <summary>
 Evaluate the value for  expression to assign the value in  tableclass.
 </summary>
 <param name="FieldAssignExpression">AssignExpression to be evaluated</param>
 <param name="aclsObject">An array of table class objects in use</param>
 <param name="HashPublicValues">HashTable to hold public variables</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.EvalFieldExpression(System.String@,System.Object[]@,System.Collections.Hashtable@,System.Object[])">
 <summary>
 Evaluate the value for  expression to assign the value in  tableclass.
 </summary>
 <param name="FieldAssignExpression">AssignExpression to be evaluated</param>
 <param name="aclsObject">An array of table class objects in use</param>
 <param name="HashPublicValues">HashTable to hold public variables</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.EvalBlockVariables(System.Collections.Hashtable@,System.Object[]@,System.Collections.Hashtable@,System.Object[]@)">
 <summary>
 Evaluate the value for  BlockVariables expression to assign the value in  tableclass.
 </summary>
 <param name="BlockVariables" >A hashtable of blockvariables and expressions</param>
 <param name="aclsObject">An array of table class objects in use</param>
 <param name="HashPublicValues">HashTable to hold public variables</param>
 <param name="InstanceClasses" >An Array of instanceobjects</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.EvalExpressionByType(System.String,System.String,System.Object[]@,System.Collections.Hashtable@)">
 <summary>
 Evaluate value of expression runtime 
 </summary>
 <param name="AssignFrom">Permissible values are  HashTable,DataRow,DataTable,Property,Function </param>
 <param name="AssignExpression">HavingKeywords </param>
 <param name="aclsObject"></param>
 <param name="HashPublicValues"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastValuePlusOne(System.Data.DataTable@,System.String,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 To get and assign increamental last value in a data table for a given field.
 </summary>
 <param name="LDataTable">Data table from which lastkey found and replaced</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="AssignValueToField" >True  if LastValuePlusOne to be assigned to column values of datatable. </param>
 <param name="OnlyEmpty" >True ,if only empty ,zero or null cells to be replace</param>
 <param name="StartFrom" >Field Value to be start from </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastValuePlusOne_new(System.Data.DataTable@,System.String@,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 To get and assign increamental last value in a data table for a given field.
 </summary>
 <param name="LDataTable">Data table from which lastkey found and replaced</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="AssignValueToField" >True  if LastValuePlusOne to be assigned to column values of datatable. </param>
 <param name="OnlyEmpty" >True ,if only empty ,-1 or null cells to be replace</param>
 <param name="StartFrom" >Field Value to be start from</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeyPlus(System.String,System.String@,System.String,System.Data.DataRow@,System.Collections.Hashtable@)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format , if space or used table names are full identifier then this will extracted from full table name</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="NewRowTemplate" >NewRowTemplate for RowSource used for new insert in sql table </param>
 <param name="LastKeyValues" >An array of hashtable having LastKeyPlus  values involved in this transaction.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeyPlus(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String,System.Data.DataRow@,System.Collections.Hashtable@)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="LCondition" >Optional condition for lastkeyplus query</param>
 <param name="NewRowTemplate" >NewRowTemplate for RowSource used for new insert in sql table </param>
 <param name="LastKeyPlusInTransaction" >An array of hashtable having LastKeyPlus  values involved in this transaction.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeyPlus(System.Data.SqlClient.SqlConnection@,System.String,System.String,System.String,System.Data.DataRow@,System.Collections.Hashtable@)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="LConnection" >SqlConnection</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="LastKeyField">Field name of lastkey</param>
 <param name="LCondition" >Optional condition for lastkeyplus query</param>
 <param name="NewRowTemplate" >NewRowTemplate for RowSource used for new insert in sql table </param>
 <param name="LastKeyPlusInTransaction" >An array of hashtable having LastKeyPlus  values involved in this transaction.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeysPlus(System.Data.SqlClient.SqlConnection@,System.Object@,System.Collections.Hashtable@)">
 <summary>
 To get increamental last key from  SQL Tables ,If a constraints are given in a collection
 </summary>
 <param name="LConnection">SqlConnection object</param>
 <param name="ClsTable" >A table class object</param>
 <param name="LastKeysValues" >A Hash Table with keys are tablename and values are another hash table (keys= Increamenting fields(Including primary keys),Values= LastValue + 1 of sql table,</param>
 <returns>A  ClsTable object with updated LastKeyValues</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeysPlusQueryStr(System.Object@,System.String@)">
 <summary>
 To get increamental last key query string from  SQL Tables ,If a constraints are given in a collection
 </summary>
 <param name="ClsTable" >table class object</param>
 <param name="QueryStr"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeysPlus(System.Data.SqlClient.SqlTransaction@,System.Object[],System.Collections.Hashtable@)">
 <summary>
 To get increamental last key from  SQL Tables ,If a constraints are given in a collection
 </summary>
 <param name="Ltrans">Sql Transaction object</param>
 <param name="aClsTable" >An array of  table class object</param>
 <param name="LastKeysValues" >A Hash Table with keys are tablename and values are another hash table (keys= Increamenting fields(Including primary keys),Values= LastValue + 1 of sql table,</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeysPlus(System.Data.SqlClient.SqlTransaction@,System.Object[]@)">
 <summary>
 To get increamental last key from  SQL Tables ,If a constraints are given in a collection
 </summary>
 <param name="Ltrans">Sql Transaction object</param>
 <param name="aClsTable" >An array of  table class object</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeysPlus(System.Data.SqlClient.SqlConnection@,System.Object[]@)">
 <summary>
 To get increamental last key from  SQL Tables ,If a constraints are given in a collection
 </summary>
 <param name="LConnection">SqlConnection object</param>
 <param name="aClsTable" >An array of  table class object</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlStringLastKey(System.String@,Microsoft.VisualBasic.Collection@,System.Boolean,System.Boolean,System.String,System.String)">
 <summary>
 To create SQL querry/non querry string for sql command execution 
 </summary>
 <param name="LTableName">Main Table name</param>
 <param name="LastKeyCollection">A collection having fields informations of primary key and additional keyno.{col0=FieldName_PrimaryKey, col1=PrimaryFieldType, col2=PrimaryFieldSize, col3=PrimaryfieldPrefix, col4=FieldName_VoucherType, col5=FieldName_VoucherNo, col6=FieldName_Date, col7=IncreamentType(A=Always,F=Financial year wise,Y=Yearwise,M=Month wise,D=DateWise), col8=StringOfVoucherTypes Separated by ! for common voucher no increament}</param>
 <param name="AddLast">TRUE, if row of lastkey is added onto the table ,otherwise take False if lastkey is only computed</param>
 <param name="LPrimaryKey">True if primary key is calculated,False if additional key calculated</param>
 <param name="CurrentDate">Current Date on which additional key generated</param>
 <param name="LVoucherType">Current Voucher Type on which additional key generated</param>
 <returns>String of SQL querry</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.IndexFileExists(System.String,System.String,System.String)">
 <summary>
 Check wether an index of an SQL table exists
 </summary>
 <param name="SqServer">Server name as string</param>
 <param name="LDataBase">DataBase name as string</param>
 <param name="IndexName">Index Name to be searched</param>
 <returns>Existing flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.IndexFileExists(System.String,System.String)">
 <summary>
 Check wether an index of an SQL table exists
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="IndexName">Index name to be searched</param>
 <returns>Existing flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DbfConnection(System.String)">
 <summary>
 To open a coonection for a dbase III file
 </summary>
 <param name="DBFFolder">Folder which contains a DBF file</param>
 <returns>An ODBC connection </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FoxProConnection(System.String)">
 <summary>
 To open a coonection for a dbase III file
 </summary>
 <param name="DBFFolder">Folder which contains a DBF file</param>
 <returns>An ODBC connection </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetStructureDBFFile(System.String,System.String)">
 <summary>
 Get structure of a DBF file
 </summary>
 <param name="FullDBFName ">FullNameDBFFile</param>
 <returns>Strucure of DBF as DataTable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryColumns(System.Data.DataTable@,System.String)">
 <summary>
 Set Primary columns of data table for fast searching
 </summary>
 <param name="LdataTable">Datatable as datatable</param>
 <param name="PrimaryCols">Comma separated list of primary columns</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetExcelColumTypes(System.String,System.Collections.Hashtable,System.String)">
 <summary>
 Change type of excel columns using their column codes eg A,B,C etc
 </summary>
 <param name="ExcelFileName"></param>
 <param name="ColumnTypes">HashTable having column names as key and value as string,date,decimal etc.</param>
 <param name="mSheet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetExcelXMLColumTypes(System.String,System.Collections.Hashtable,System.String)">
 <summary>
 Change type of ClosedXML.excel columns using there column codes eg A,B,C etc
 </summary>
 <param name="ExcelFileName"></param>
 <param name="ColumnTypes">HashTable having column names as key and value as string,date,decimal etc.</param>
 <param name="mSheet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetColumnTypes(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Set Primary columns of data table for fast searching
 </summary>
 <param name="LdataTable">Datatable as datatable</param>
 <param name="ColumnTypes">HashTable having column names as key and type as value</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryColumns(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Set Primary columns of data table for fast searching
 </summary>
 <param name="LdataTable">Datatable as datatable</param>
 <param name="PrimaryCols">Primary columns with type as hashtable,where key is columnname,value is columntype</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryColumns(System.Data.DataTable@,System.String[])">
 <summary>
 Set Primary columns of data table for fast searching
 </summary>
 <param name="LdataTable">Datatable as datatable</param>
 <param name="PrimaryCols">Array of primary columns</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaTable(System.String,System.String,System.String)">
 <summary>
 Get schema/structure of a SQL table in a data table,ColumnName,ColumnOrdinal,ColumnSize,DataTypeName,NumericPrecision,NumericScale
 </summary>
 <param name="SqServer">Sql Server name as string</param>
 <param name="lDatabase">Data base name as string</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaTable(System.String,System.String)">
 <summary>
 Get schema/structure of a SQL table in a data table columns are ColumnName,ColumnOrdinal,ColumnSize,DataTypeName,NumericPrecision,NumericScale
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetTableNameFromSqlIdentifier(System.Object)">
 <summary>
 Get base table name from full sql table identifier i.e. server.database.dbo.table or 0_srv_0.0_mdf_0.dbo.Table format
 </summary>
 <param name="SqlTableFullIdentifier"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetServerFromSqlIdentifier(System.Object)">
 <summary>
 Get Server name from full sql table identifier i.e. server.database.dbo.table or 0_srv_0.0_mdf_0.dbo.Table format 
 </summary>
 <param name="SqlTableFullIdentifier"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetServerDataBaseFromSqlIdentifier(System.String)">
 <summary>
 Get ServerDatabase  from full sql table identifier i.e. server.database.dbo.table or 0_srv_0.0_mdf_0.dbo.Table format 
 </summary>
 <param name="SqlTableFullIdentifier"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataBaseFromSqlIdentifier(System.Object)">
 <summary>
 Get database name from full sql table identifier i.e. server.database.dbo.table format or 0_srv_0.0_mdf_0.dbo.Table format
 </summary>
 <param name="SqlTableFullIdentifier"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaInformations(System.String@,System.String@)">
 <summary>
 Get schema/structure of a SQL table in a data table columns are 'Table_Catalog   (database name),Table_Name,Column_Name,Ordinal_Position,Character_maximum_length,Data_Type,numeric_Precision  size of numeric,decimal type,NUMERIC_SCALE    digits after decimal,Is_Nullable  = Nullable
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.getprimarykey(System.String,System.String)">
 <summary>
 get  sql table's primary key field name.
 </summary>
 <param name="serverdatabase">full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="tablename">name of table of getting structue/schema</param>
 <returns>return primary key column name of the table</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.getprimarykey(System.String@)">
 <summary>
 Get  SQL table's primary key field name.
 </summary>
 <param name="FullIdentifierTableName">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <returns>Return Primary key column name of the table</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.getprimarykey(System.Data.SqlClient.SqlConnection@,System.String@)">
 <summary>
 Get  SQL table's primary key field name.
 </summary>
 <param name="mSqlConnection">opened sql connection</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Return Primary key column name of the table</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.getprimarykey(System.Data.DataTable@)">
 <summary>
 Get  SQL table's primary key field name from SchemaInformation.
 </summary>
 <param name="SchemaTable">SchemaTable of a SQL Table returned by GetSchemaTable or GetSchemaInformations </param>
 <returns>Return Primary key column name of the table</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaTable(System.Data.SqlClient.SqlTransaction@,System.String@)">
 <summary>
 Get schema/structure of a SQL table in a data table
 </summary>
 <param name="Sql_Transaction" >Sql Transaction</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaTable(System.Data.SqlClient.SqlConnection@,System.String@)">
 <summary>
 Get schema/structure of a SQL table in a data table columns are  ColumnName,ColumnOrdinal,columnSize,DataTypeName,NumericPrecision  numeric size,NumericScale    digits after decimal
 </summary>
 <param name="LConnection" >Sql Connection</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSchemaInformations(System.Data.SqlClient.SqlTransaction@,System.String@)">
 <summary>
 Get schema/structure of a SQL table in a data table columns are  Table_Catalog   (database name),Table_Name,Column_Name,Ordinal_Position,Character_maximum_length,Data_Type,numeric_Precision  size of numeric,decimal type,NUMERIC_SCALE    digits after decimal,'Is_Nullable  = Nullable
 </summary>
 <param name="Sql_Transaction">Sql Transaction</param>
 <param name="TableName">Name of Table of getting structue/schema</param>
 <returns>Structure in a datatable object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.String,System.String,System.String,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="ServerDatabase ">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table from which rows deleted </param>
 <param name="lCondition">Where Clause as string</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.String,System.String,System.Collections.Hashtable,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="ServerDatabase ">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table from which rows deleted </param>
 <param name="HCondition">Where Clause as hashtable</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="lCondition" >Where Clause as string</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.Int32,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="PrimarySearchField" >Primary key field name</param>
 <param name="PrimarySearchValue" >Primary Key field value </param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.String@,System.String,System.String,System.Int32,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="serverdatabase" >Sql serverdatabase by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="PrimarySearchField" >Primary key field name</param>
 <param name="PrimarySearchValue" >Primary Key field value </param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.String@,System.String,System.String,System.String,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="serverdatabase" >Sql serverdatabase by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="PrimarySearchField" >Primary key field name</param>
 <param name="PrimarySearchValue" >Primary Key field value </param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="PrimarySearchField" >Primary key field name</param>
 <param name="PrimarySearchValue" >Primary Key field value </param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.Data.SqlClient.SqlTransaction@,System.String,System.Collections.Hashtable,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="TableName" >Table from which rows deleted</param>
 <param name="FieldValues" >FieldValues as hashtable where key is fieldname and field value is hashtable value</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecords(System.Data.SqlClient.SqlConnection@,System.String,System.String,System.Boolean@)">
 <summary>
 Delete records from an SQL Table
 </summary>
 <param name="SQL_Connection">SQL connection already open</param>
 <param name="TableName">Table from which rows deleted</param>
 <param name="lCondition">Where Clause as string</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromDBF(System.String,System.String,System.String,System.String)">
 <summary>
 Get Datatable from a DBF table
 </summary>
 <param name="FullDBFName">Full dbf file name with path and extension</param>
 <param name="Lcondition">Where Clause as string</param>
 <param name="Lorder ">Order By Clause as string </param> ''' 
 <param name="PrimaryCols">Comma separated string of primary columns</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromFoxPro(System.String,System.String,System.String,System.String)">
 <summary>
 Get Datatable from a DBF table
 </summary>
 <param name="FullDBFName">Full dbf file name with path and extension</param>
 <param name="Lcondition">Where Clause as string</param>
 <param name="Lorder ">Order By Clause as string </param> ''' 
 <param name="PrimaryCols">Comma separated string of primary columns</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromExcel(System.String,System.String,System.String,System.String,System.String,System.Collections.Hashtable)">
 <summary>
 Get data table from an excel file
 </summary>
 <param name="FullExcelFile">Full exel file name with path and extension</param>
 <param name="LCondition">Where Clause as string , it is case sensitive</param>
 <param name="Lorder">Order By Clause as string</param>
 <param name="PrimaryCols">Comma separated string of primary columns</param>
 <param name="SheetName" >SheetName of excel from which data fetched,default is first sheet</param>
 <param name="ColumnTypes" >Excel column types as hashtable ,where key is excelcolumn eg A,B,C,..and value is columnType as (string,date,decimal)</param>
 <returns>Data table of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateIndexByExcelList(System.String,System.String,System.String,System.String)">
 <summary>
 Create index files of sql tables , whoose names are stored in an excel file(column name -fname) and index fields and index filename are stored in (column name-ntxf) eg. value of ntfx may be (  IndexFld1*IndexFile1~IndexFld2*IndexFile2~IndexFld3*IndexFile3)
 </summary>
 <param name="Sqserver">Sql Server Name </param>
 <param name="LDataBase">Sql DataBase Name</param>
 <param name="ExcelSource">Excel file name with path and extension</param>
 <param name="IncludeTables">Comma separated String of Table names, default is all</param>
 <returns>Completion flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateIndex(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 To create index files on an SQL Table specifying its key fields and index file names
 </summary>
 <param name="SqServer">Sql Server Name</param>
 <param name="LDataBase">Sql Data Base name</param>
 <param name="LTable">Sql Table Name</param>
 <param name="IndexKey ">Comma separated list of index fields</param>
 <param name="IndexFile" >Name of index file</param> 
 <returns>Completion flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
 Execute T-SQL non query statements 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format </param>
 <param name="SqlStr">Sql Non querry statements</param>
 <param name="SqlParameterArr">Sql Parameters array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.Data.SqlClient.SqlParameter[],System.String,System.String,System.String)">
 <summary>
 Execute T-SQL non query statements 
 </summary>
 <param name="ServerName" >servername </param>
 <param name="LDataBase" >Database name</param>
 <param name="SqlStr">Sql Non querry statements</param>
 <param name="SqlParameterArr">Sql Parameters array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.Data.SqlClient.SqlTransaction@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
 Execute T-SQL non query string command
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="SqlStr">Non querry string to be executed</param>
 <param name="SqlParameterArr" >Sql parameters as array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.Data.SqlClient.SqlTransaction@,System.Data.SqlClient.SqlCommand@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
 Execute T-SQL non query string command
 </summary>
 <param name="Sql_Transaction" >Sql Transaction by reference</param>
 <param name="SqlStr">Non querry string to be executed</param>
 <param name="SqlParameterArr" >Sql parameters as array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.Data.SqlClient.SqlCommand@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
 Execute T-SQL non query string command
 </summary>
 <param name="Sql_command" > Sql_command by reference</param>
 <param name="SqlStr">Non querry string to be executed</param>
 <param name="SqlParameterArr" >Sql parameters as array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteNonQuery(System.Data.SqlClient.SqlConnection@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
 Execute T-SQL non query string command
 </summary>
 <param name="SQL_Connection">SQL connection already open </param>
 <param name="SqlStr">Non querry string to be executed</param>
 <param name="SqlParameterArr" >Sql parameters as array</param>
 <returns>No. of rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteScalarQuery(System.String,System.String)">
 <summary>
 Execute T-SQL Scaler querry  statement 
 </summary>
 <param name="ServerDatabase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="Sqlstr">Scaler Querry Strig command to be executed</param>
 <returns>An object type return</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteScalarQuery(System.Data.SqlClient.SqlTransaction@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
  Execute T-SQL Scaler querry  statement 
 </summary>
 <param name="Sql_Transaction" >Sql transaction by reference</param>
 <param name="Sqlstr">Scaler Querry Strig command to ben executed</param>
 <returns>An integer type return</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteScalarQuery(System.Data.SqlClient.SqlConnection@,System.String,System.Data.SqlClient.SqlParameter[])">
 <summary>
  Execute T-SQL Scaler querry  statement 
 </summary>
 <param name="Sql_Connection" >Sql Connection by reference</param>
 <param name="Sqlstr">Scaler Querry Strig command to ben executed</param>
 <returns>An integer type return</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataTable(System.String,System.String,System.String,System.String)">
 <summary>
 Execute T-SQL  querry  statement
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SqlStr"></param>
 <param name="FromClauseTable" >TableName used in from clause of sqlstr query</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.String,System.String,System.Collections.Hashtable)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="TableNamesAndPrimaryCols" >Hashtable where key is tablename and value is comma separated primary columns</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.String,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="StartRecord" >Start Record No</param>
 <param name="MaxRecord" >Maximum Records to fetch</param>
 <param name="TableNamesAndPrimaryCols" >Hashtable where key is tablename and value is comma separated primary columns</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataTable(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_Transaction">Sql Transaction </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="PrimaryColumns" >Comma separated fields for primary columns</param>
 <param name="FromClauseTable" >Table name used in from clause(s) of sqlstr query,Set as TableName property  of DataTable(server.database.dbo.table)</param>
 <returns>return a data table object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataTable(System.Data.SqlClient.SqlCommand@,System.String,System.String,System.String)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_command">Sql_command </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="PrimaryColumns" >Comma separated fields for primary columns</param>
 <param name="FromClauseTable" >Table name used in from clause(s) of sqlstr query,Set as TableName property  of DataTable(server.database.dbo.table)</param>
 <returns>return a data table object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataTable(System.Data.SqlClient.SqlConnection@,System.String,System.String,System.String)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="LConnection">Sql Connection </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="PrimaryColumns" >Comma separated fields for primary columns</param>
 <param name="FromClauseTable" >Comma separated string of tables used in from clause(s) of sqlstr query,Set as TableName property  of DataTable(server.database.dbo.table)</param>
 <returns>return a data table object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.Data.SqlClient.SqlTransaction@,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_Transaction">Sql Transaction </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="TableNamesAndPrimaryCols" >Hashtable where key is tablename and value is comma separated primary columns</param>
 <returns>return a data set object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.Data.SqlClient.SqlConnection@,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_connection">Sql Sql_connection </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="TableNamesAndPrimaryCols" >Hashtable where key is tablename and value is comma separated primary columns</param>
 <returns>return a data set object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.Data.SqlClient.SqlCommand@,System.String,System.Collections.Hashtable,System.Int32,System.Int32)">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_command">Sql_command </param>
 <param name="SqlStr">Querry Strig command to be executed</param>
 <param name="TableNamesAndPrimaryCols" >Hashtable where key is tablename and value is comma separated primary columns</param>
 <param name="StartRecord">StartRecord</param>
 <paramref name="MaxRecord">MaxRecord</paramref>
 <returns>return a data set object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.Data.SqlClient.SqlTransaction@,System.Object[])">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="Sql_Transaction">Sql Transaction </param>
 <param name="aClsTables" >An array of tableclass objetcs</param>
 <returns>return a data set  object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.SqlExecuteDataSet(System.Object[])">
 <summary>
 Execute T-SQL  query  statement
 </summary>
 <param name="aClsTables" >An array of tableclass objetcs</param>
 <returns>return a data set  object </returns>
 <remarks></remarks>
 
</member>
<member name="M:DataFunctions.DataFunctions.CreateTableByFields(System.String,System.String,System.String)">
 <summary>
 Create SQL Table 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table Name to be created</param>
 <param name="mfields">String of fields eg "LastName varchar(255),FirstName varchar(255),Address varchar(255),City varchar(255)" </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateTable(System.String,System.String,System.Data.DataTable)">
 <summary>
 Create SQL Table 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table Name to be created</param>
 <param name="StructureTable" >A datatable containing the values of structure columns as rows</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateTable(System.String,System.String,System.String)">
 <summary>
 Create SQL Table by excel structure worksheet 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table Name to be created</param>
 <param name="StructureExcelFile" >Full path of excel work sheet containing the whole schema as rows</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateDataTable(System.Data.DataTable,System.String)">
 <summary>
 Create a new datatable whose structure is in a datatable
 </summary>
 <param name="StructureTable">Structure table as datatable</param>
 <param name="StructureColumns">Comma separated names of columns which are corresponding to  Field_Name and Field_Type and PrimaryKeyFlag field </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AlterSQLTable(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Alter fields of  SQL Table 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table Name to be altered</param>
 <param name="FieldsToAdd" >String of fields to add  eg "LastName varchar(255),FirstName varchar(255),Address varchar(255),City varchar(255)"</param>
 <param name="FieldsToRemove" >String of fields eg "LastName ,FirstName,Address,City"</param>
 <param name="FieldsToModify" >String of modifying fields eg "LastName varchar(255),FirstName varchar(255),Address varchar(255),City varchar(255)"</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AlterDataTable(System.Data.DataTable@,System.String,System.String,System.Boolean)">
 <summary>
 Alter (Add/Remove) columns in a datatable. 
 </summary>
 <param name="LDataTable" >DataTable name to be modified</param>
 <param name="ColumnsToAdd" >Comma separated ColumnNames  as string to be added</param>
 <param name="ColumnsToRemove" >Comma separated ColumnNames  as string to be removed</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ShrinkDataTable(System.Data.DataTable@,System.String,System.Boolean)">
 <summary>
 Shrink a datatable for given columns. 
 </summary>
 <param name="LDataTable" >DataTable name to be shrinked</param>
 <param name="RemainingColumns" >Comma separated ColumnNames  as string to be remained</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ShrinkSqlTable(System.String,System.String,System.String)">
 <summary>
 Shrink an SQL Table for remaining fields. 
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table Name to be altered</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateSQLTableFromExcel(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Create SQL Table From Excel taking first row as header fields
 </summary>
 <param name="sqServer">SqL server name</param>
 <param name="SqFolder">Folder where data base created if not exists in server</param>
 <param name="SqDataBase">Sql DataBase Name</param>
 <param name="TableName">Name of Table created</param>
 <param name="ExcelFilePath">Excel file with full path</param>
 <param name="RefreshTable">Remove Table </param>
 <param name="WhereClause">Searching clause on excel file</param>
 <param name="OrderClause">Orderby clause on excel file</param>
 <returns>True if successful</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateSQLTableFromExcel(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Create SQL Table From Excel taking first row as header fields
 </summary>
 <param name=" ServerDataBase ">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name=" TableName" >Name of Table created</param>
 <param name="ExcelFilePath" >Excel file with full path</param>
 <param name="RefreshTable">Remove Table </param>
 <param name="WhereClause">Searching clause on excel file</param>
 <param name="OrderClause">Orderby clause on excel file</param>
 <returns>True if successful</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateTable(System.Data.SqlClient.SqlTransaction@,System.String,System.String)">
 <summary>
 Create SQL Table
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="TableName">Table Name to be created</param>
 <param name="mfields">String of fields eg "LastName varchar(255),FirstName varchar(255),Address varchar(255),City varchar(255)"</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropTable(System.String,System.String,System.String)">
 <summary>
 Remove table from sql database
 </summary>
 <param name="SqServer"  >Sql Server name</param>
  <param name="SqDataBase" >Sql Database name</param>
 <param name="TableName">Table name to be remove</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropTable(System.Data.SqlClient.SqlTransaction@,System.String)">
 <summary>
 Remove SQL Table
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="TableName">Table Name to be removed</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropTable(System.String,System.String)">
 <summary>
 Remove table from sql database
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table name to be removed</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TruncateTable(System.String,System.String,System.String)">
 <summary>
 To remove all rows from a sql table
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Rows of Table name to  be removed</param>
 <param name="WhereClause">Filter condition on sql table</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TruncateTable(System.String)">
 <summary>
 To remove all rows from a sql table
 </summary>
 <param name="SqlTableFullIdentifier">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0.dbo.table format</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TruncateTable(System.Object)">
 <summary>
 To remove all rows from a sql table
 </summary>
 <param name="TableClassObject">t</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TruncateTable(System.Data.SqlClient.SqlTransaction@,System.String,System.String)">
 <summary>
 To remove all rows from a sql table
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="TableName">Rows of Table name to  be removed</param>
 <param name="WhereClause">Filter condition on sql table</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RenameTable(System.String,System.String,System.String)">
 <summary>
 To Rename sql table of one database
 </summary>
 <param name="ServerDatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="OldTableName ">Old table name to  be renamed</param>
 <param name="NewTableName ">New Table Name</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RenameTable(System.Data.SqlClient.SqlTransaction@,System.String,System.String)">
 <summary>
 To Rename sql table of one database
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="OldTableName">Old table name to  be renamed</param>
 <param name="NewTableName">New Table Name</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropDataBase(System.String)">
 <summary>
 To remove SQL database 
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DropDataBase(System.String,System.String)">
 <summary>
 TO Remove SQL Database
 </summary>
 <param name="ServerName">Server Name</param>
 <param name="LDataBase">DataBase Name to be removed</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CopySqlTable(System.Data.SqlClient.SqlTransaction@,System.String@,System.String@,System.String@)">
 <summary>
 Create a table by copying another table of same or distinct database/server
 </summary>
  <param name="LTransaction">Transaction object passed by reference</param>
 <param name="To_Table">Target table name</param>
 <param name="From_Table">Source table name</param>
 <param name="WhereClause"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CopySqlTable(System.String@,System.String@,System.String@,System.String@)">
 <summary>
 Create a table by copying another table of same or distinct database/server
 </summary>
 <param name="ServerDataBase ">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="To_Table">Target table name</param>
 <param name="From_Table">Source table name</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSqlTable(System.String@,System.String@,System.String@,System.Boolean@,System.Boolean)">
 <summary>
 Create a table by copying another table of same or distinct database/server
 </summary>
 <param name="To_Table">Full Identifier of Target table name</param>
 <param name="From_Table">Full Identifier of Source table name (srv0.mdf0.dbo.table)</param>
 <param name="WhereClause" ></param>
 <param name="EmptyTarget" >Truncate target table first</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSqlTable(System.String,System.String,System.Int32,System.Boolean)">
 <summary>
 Append a table by adding another table rows of same or distinct database/server
 </summary>
 <param name="To_Table">Full Identifier of Target table name</param>
 <param name="From_Table">Full Identifier of Source table name (srv0.mdf0.dbo.table)</param>
 <param name="SourcePrimaryKeyValue" ></param>
 <param name="EmptyTarget" >Truncate target table first</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSqlTable(System.String@,System.String@,System.String@,System.Int32@,System.Boolean@,System.Boolean@)">
 <summary>
 Append a table by adding another table rows of same or distinct database/server
 </summary>
 <param name="To_Table">Full Identifier of Target table name</param>
 <param name="From_Table">Full Identifier of Source table name (srv0.mdf0.dbo.table)</param>
 <param name="SourceUniqueField"></param>
 <param name="SourceUniqueKeyValue" ></param>
 <param name="SourceRowStatusFlag"></param>
 <param name="EmptyTarget" >Truncate target table first</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSqlTable(System.Object@,System.Object@,System.Boolean@)">
 <summary>
 Append a table by adding another table rows of same or distinct database/server
 </summary>
 <param name="To_Table">Target table object</param>
 <param name="From_Table">Source table object</param>
 <param name="EmptyTarget" >Truncate target table first</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSqlTable(System.String,System.String,System.Collections.Hashtable,System.Boolean)">
 <summary>
 Append a table by adding another table rows of same or distinct database/server
 </summary>
 <param name="To_Table">Full Identifier of Target table name</param>
 <param name="From_Table">Full Identifier of Source table name (srv0.mdf0.dbo.table)</param>
 <param name="EmptyTarget" >Truncate target table first</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.String,System.String,System.String,System.String,System.String,System.String@)">
 <summary>
 To count total no. of rows  
 </summary>
 <param name="Serverdatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table name</param>
 <param name="lCondition">Where clause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias" ></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String,System.String,System.String@)">
 <summary>
 To count total no. of rows
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="TableName">Table name</param>
 <param name="lCondition">Where clause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias" ></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.Data.SqlClient.SqlConnection@,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 To count total no. of rows
 </summary>
 <param name="LSqlConnection">SqlConnection object passed by reference</param>
 <param name="TableName">Table name</param>
 <param name="lCondition">Where clause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias" ></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.String,System.String,System.Object@,System.String,System.String)">
 <summary>
 To count total no. of rows  
 </summary>
 <param name="Serverdatabase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table name</param>
 <param name="FilterObject">FilterObject having Whereclause,JoinClause,InClause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias"></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.Data.SqlClient.SqlTransaction@,System.String,System.Object@,System.String,System.String)">
 <summary>
 To count total no. of rows
 </summary>
 <param name="LTransaction">Transaction object passed by reference</param>
 <param name="TableName">Table name</param>
 <param name="FilterObject">FilterObject having Whereclause,JoinClause,InClause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias" ></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowsCount(System.Data.SqlClient.SqlConnection@,System.String,System.Object,System.String,System.String)">
 <summary>
 To count total no. of rows
 </summary>
 <param name="LSqlConnection">SqlConnection object passed by reference</param>
 <param name="TableName">Table name</param>
 <param name="FilterObject">FilterObject having Whereclause,JoinClause,InClause of querry</param>
 <param name="lorder">Order clause of querry</param>
 <param name="TableAlias" ></param>
 <returns>Total nos. of rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FirstExcelSheetName(System.String)">
 <summary>
 To get first excel work sheet name of excel file
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <returns>First work shhet name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FirstExcelXMLSheetName(System.String)">
 <summary>
 To get first excel work sheet name of closedxml excel file
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <returns>First work shhet name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetExcelSheetNames(System.String)">
 <summary>
 To get first excel work sheet name of excel file
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <returns>First work shhet name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetExcelXMLSheetNames(System.String)">
 <summary>
 To get first excel work sheet name of excel file
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <returns>First work shhet name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AutoFitExcelColumns(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 To set excel column width by columns heading or contents.
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <param name="SheetName"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AutoFitExcelColumns(Microsoft.Office.Interop.Excel.Worksheet@,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 To set excel column width by columns heading or contents.
 </summary>
 <param name="wsheet">Microsoft.Office.Interop.Excel.Worksheet</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AutoFitExcelXMLColumns(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 To set excel column width by columns heading or contents in closedXML.Excel.
 </summary>
 <param name="FullExcelFile">Excel file name with path and extension</param>
 <param name="SheetName"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AutoFitExcelXMLColumns(ClosedXML.Excel.IXLWorksheet@,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 To set excel column width by columns heading or contents.
 </summary>
 <param name="wsheet">ClosedXML.Excel.IXLWorksheet</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataBasePath(System.String,System.String)">
 <summary>
 To get physical path of a database in a sql server
 </summary>
 <param name="ServerName">Server name as string</param>
 <param name="DatabaseName">Data base name to be searched</param>
 <returns>Full path of database name</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSqlDataBasePath(System.String)">
 <summary>
 To get physical path of a database in a sql server
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <returns>Physical path of database</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendExcelToSQL(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 To add excel rows to an existing SQL table whoose columns are same as fields of sql table
 </summary>
 <param name="FullExcelFile">Full path of excel table</param>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TableName">Table name on which excel rows are added</param>
 <param name="WhereClause" >Where clause to filter excel table</param>
 <param name="ExcelColumns" >Identify excel columns by "name" or "index"  </param>
 <param name="RemoveALLRows" >If True, remove all existing rows in target table</param>
 <returns>Execution flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertExcelToSql(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 To add excel rows to an existing SQL table whoose columns are same as fields of sql table
 </summary>
 <param name="FullExcelFile">Full path of excel table</param>
 <param name="SqServer" >Sql server name</param>
 <param name="SqDatabase">Database name</param>
 <param name="TableName">Table name on which excel rows are added</param>
 <param name="WhereClause" >Where clause to filter excel table</param>
 <param name="ExcelColumns" >Mapping of  excel columns and sql table fields by "name" or "index"</param>
 <param name="RemoveALLRows" >If True, remove all existing rows in target table</param>
 <returns>Execution flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertStringDataToSql(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 To add a compatible string data template to an existing SQL table. </summary>
 <param name="DataStringTemplate">String data template columns are separated by | and rows by chr(13)</param>
 <param name="ServerDatabase " >Sql server name</param>
 <param name="TableName">Table name on which excel rows are added</param>
 <param name="RemoveALLRows" >If True, remove all existing rows in target table</param>
 <returns>Execution flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertCSVFileToSql(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
 <summary>
 To insert a CSV file into  SQL table. </summary>
 <param name="CSVFileName">CSV File Name columns are separated by , and rows by chr(13)</param>
 <param name="ServerDatabase " >Sql server name</param>
 <param name="TableName">Table name on which excel rows are added</param>
 <param name="StartRowNo" >Start row no of  CSV file from which data to be added i.e. rowno excluding header</param>
 <param name="RemoveALLRows" >If True, remove all existing rows in target table</param>
 <param name="ColSeparator" >Column separator of CSV/TXT file</param>
 <param name="RowSeparator" >Row separator of CSV/TXT file</param>
 <returns>Execution flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataFromCSV(System.String,System.Int32,System.String,System.String)">
 <summary>
 To get data table from a CSV file . </summary>
 <param name="CSVFileName">CSV File Name columns are separated by , and rows by chr(13)</param>
 <param name="StartRowNo" >Start row no of  CSV file from which data to be added i.e. rowno excluding header</param>
 <param name="ColSeparator" >Column separator of CSV/TXT file</param>
 <param name="RowSeparator" >Row separator of CSV/TXT file</param>
 <returns>Execution flag</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertExcelRowsToSql(System.Data.SqlClient.SqlTransaction@,System.Data.DataTable,System.Data.DataTable,System.String,System.String)">
 <summary>
 Private function to insert a range of rows of datatable of excel work sheet into sql table
 </summary>
 <param name="LTransaction">Sql Transaction</param>
 <param name="ExcelRows">DataTable object of excel worksheet</param>
 <param name="Lschema">DataTable of Schema of SQL Table to be inserted </param>
 <param name="TableName" >Table name into rows will be inserted</param>
 <param name="ExcelCoumns">Mapping of  excel columns and sql table fields by "name" or "index"</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AppendSQLToSQL(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 To add/update rows from source sql table to target sql table for common field names,primary key names are same for both tables.  
 </summary>
 <param name="LocalServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTable">Source table name or full identifier table name</param>
 <param name="TargetServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TargetTable">Target table name or full identifier table name</param>
 <param name="WhereClause" >Filter condition on source table</param>
 <param name="OrderClause" >Order by Clause on source table</param>
 <param name="ReplaceFlag">If True, update row if it exists in target table</param>
 <param name="RemoveALLRows" >If True, remove all existing rows in target table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableToSql(System.Data.SqlClient.SqlTransaction@,System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Boolean@)">
 <summary>
 To insert rows of a datatable into sql table
 </summary>
 <param name="LTransaction">Sql Transaction</param>
 <param name="LDtSource">DataTable object of source table</param>
 <param name="LTargetSchema">DataTable of Schema of Target Table</param>
 <param name="TargetTable"></param>
 <param name="TargetPrimaryField">Primary key of Target table</param>
 <param name="TruncateTarget" ></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.String,System.Data.DataRow,System.String,System.Int16,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="RowSource">DataRow having the column names as field names of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="RowNo" ></param>
 <param name="TargetPrimaryField">Primary key field name of table , (if the key exists, record is updated otherwise inserted)</param>

 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.Object@,System.Data.DataRow,System.Boolean)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="TableObject">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="RowSource">DataRow having the column names as field names of table and values as  field's value  of record </param>
 <param name="TruncateTarget">Name of table in which record inserted</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.Object@,System.Collections.Hashtable,System.Boolean)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="TableObject">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="RowSource">Hashtable having the column names as key names  and values as  field's value  of record </param>
 <param name="TruncateTarget">Name of table in which record inserted</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.String,System.Collections.Hashtable,System.String,System.Int16,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="RowSource">Hashtable having the column names as Keys of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="RowNo" ></param>
 <param name="TargetPrimaryField">Primary key field name of table , (if the key exists, record is updated otherwise inserted)</param>

 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.String,System.Collections.Hashtable,System.Int16,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="SqlTableFullIndentifier">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0.dbo.table format</param>
 <param name="RowSource">Hashtable having the column names as Keys of table and values as  field's value  of record </param>
 <param name="RowNo" ></param>
 <param name="TargetPrimaryField">Primary key field name of table , (if the key exists, record is updated otherwise inserted)</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableToSql_old(System.String,System.Data.DataTable,System.String,System.String,System.Boolean)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="DtSource ">DataTable having the column names as field names of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="TargetPrimaryField">Primary key of table , if the key exists, record is updated otherwise inserted</param>
 <param name="TruncateTarget"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableToSql(System.Data.DataTable,System.String,System.String,System.Boolean)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="DtSource ">DataTable having the column names as field names of table and values as  field's value  of record </param>
 <param name="FullSqlIdentfier">Full sql identifier of a  table with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="TargetPrimaryField">Primary key of table , if the key exists, record is updated otherwise inserted</param>
 <param name="TruncateTarget"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.Data.SqlClient.SqlTransaction@,System.Data.DataRow,System.String,System.Int16,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="RowSource">DataRow having the column names as field names of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="TargetPrimaryField">Primary key of table , if the key exists, record is updated otherwise inserted</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.Data.SqlClient.SqlTransaction@,System.Collections.Hashtable,System.String,System.Int16,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="RowSource">Hashtable having the column names as keys of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="TargetPrimaryField">Primary key of table , if the key exists, record is updated otherwise inserted</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertRowToSqlTable(System.Data.SqlClient.SqlConnection@,System.Data.DataRow,System.String,System.String)">
 <summary>
 Insert Record to an SQL Table
 </summary>
 <param name="LConnection" >sql transaction </param>
 <param name="RowSource">DataRow having the column names as field names of table and values as  field's value  of record </param>
 <param name="TargetTable">Name of table in which record inserted</param>
 <param name="TargetPrimaryField">Primary key field of table , if the key exists, record is updated otherwise inserted</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableToDBF(System.String,System.Data.DataTable,System.Boolean)">
 <summary>
 Insert Record to an dbf Table
 </summary>
 <param name="FullDBFName">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="DtSource ">DataTable having the column names as field names of table and values as  field's value  of record </param>
 <param name="TruncateTarget"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TruncateDBF(System.String,System.String)">
 <summary>
 Insert Record to an dbf Table
 </summary>
 <param name="FullDBFName">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataRowToDBF(System.Data.Odbc.OdbcCommand,System.Data.DataTable@,System.Data.DataRow@,System.String@)">
 <summary>
 Insert Record to an dbf Table
 </summary>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertUpdateDeleteSqlTables(System.Data.SqlClient.SqlTransaction@,System.Object[],System.Int32@,System.Boolean)">
 <summary>
 Insert Records  to  multiple SQL Tables in a single batch execution.
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="TableClassObject">An array of Class objects of tables</param>
 <param name="Rowseffected" >Sql Execution Flag</param>
</member>
<member name="M:DataFunctions.DataFunctions.AddingNameForCodesPrimaryColsInfotable(System.Data.DataTable,System.String,System.String,System.Data.DataTable,System.Data.DataTable,System.String,System.String)">
 <summary>
Adding Names column and its value to a datatable corresponding to its code value searching from a code master data table
 </summary>
 <param name="LDataTable">DataTable object on which name columns added</param>
 <param name="TableCodeFields">Comma separated  string whoose items are column names of table,their values to be searched in code master</param>
 <param name="AddingName" >Column separated ColumnName to be inserted in ldatatable for name value of masternamefield</param>
 <param name="CodeMasterWithPrimaryColumns">A datatable having Primary columns corressponding to TableCodeFields and TableNameColumn</param>
 <param name="MasterNameField">ColumnName of CodeMaster table which contains the name</param>
 <param name="AddCodeInName" >"P" if table column code is added as prefix,"S" if table column code is added as suffix,"N" for do not add</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertUpdateDeleteSqlTables(System.Data.SqlClient.SqlTransaction@,System.Object,System.Int32@)">
 <summary>
 Insert Records  to  SQL Tables in  rowwise batch execution.
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="TableClassObject">A Class object of sql table</param>
 <param name="RowsEffected" >Number of Rows effected</param>
</member>
<member name="M:DataFunctions.DataFunctions.CheckTableClassUpdations(System.Object[]@)">
 <summary>
 Check  for data updations wether sql statements on TableClassOject() will be executed or not.
 </summary>
 <param name="TableClassObject">An array of Class objects of tables</param>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataRowsValues(System.Data.DataRow,System.Data.DataRow,System.String)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstDataRow">First data row to be compared</param>
 <param name="SecondDataRow">Second data row to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>Comma separated column names of first table which values not equal to second table column's value</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataTablesRows(System.Data.DataTable,System.Data.DataTable,System.String,System.Int32[]@,System.Int32[]@,System.Int32[]@,System.Int32[]@)">
 <summary>
 Compare Previous DataTable Rows to Current DataTable Rows and return Row index array of on SecondDataTable rows not found in first table
 </summary>
 <param name="PreviousDataTable">Table to be searched</param>
 <param name="CurrentDataTable">Table being searched</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <param name="PreviousExtraRows" >An array of row indexes of previous datatable which are missing in current datatable </param>
 <param name="CurrentExtraRows" >An array of row indexes of current datatable which are missing in previous datatable</param>
 <param name="PreviousSameRows" >An array of row indexes of previous datatable which are same in current datatable</param>
 <param name="CurrentSameRows" >An array of row indexes of previous datatable which are same in current datatable</param>
 <returns>An array of row indexes of current datatable which are same in previous datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CheckTableClassUpdation(System.Object@)">
 <summary>
 Check for data updations wether sql statements on TableClassOject will be executed or not.
 </summary>
 <param name="TableClassObject">An array of Class objects of tables</param>
</member>
<member name="M:DataFunctions.DataFunctions.CheckTableUpdation(System.Object@)">
 <summary>
 Check for data updations wether sql statements on TableClassOject will be executed or not.
 </summary>
 <param name="TableClassObject">An array of Class objects of tables</param>
</member>
<member name="M:DataFunctions.DataFunctions.SameDataSource(System.Data.SqlClient.SqlTransaction,System.Object)">
 <summary>
 Check the connection server-database with  table class object server-database
 </summary>
 <param name="SqlTrans"></param>
 <param name="TableClas"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SameDataSource(System.Data.SqlClient.SqlConnection,System.Object)">
 <summary>
 Check the connection server-database with  table class object server-database
 </summary>
 <param name="SqlConn"></param>
 <param name="TableClas"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetServerMDFForTransanction(System.Object[])">
 <summary>
 Get most used server database connection available in tables of  TableClass()
 </summary>
 <param name="TableClass"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Data.SqlClient.SqlCommand@,System.Data.DataRow,System.String,System.Data.DataTable,System.Int32,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="lcommand">sql command</param>
 <param name="mRow">row of values inserted</param>
 <param name="mTable">Table name</param>
 <param name="DtSchema">Schema of table</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.Data.DataRow,System.String,System.Data.DataTable,System.Int32,System.Int16,System.Text.StringBuilder@,System.Text.StringBuilder@,System.Text.StringBuilder@)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="SqlParamList">sql command</param>
 <param name="mRow">row of values inserted</param>
 <param name="mTable">Table name</param>
 <param name="DtSchema">Schema of table</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateUpdateQuery(System.Data.SqlClient.SqlCommand@,System.Data.DataRow,System.String,System.Data.DataTable,System.Int32,System.Int16,System.String)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="Lcommand">Command as sql command</param>
 <param name="mRow">row of values inserted</param>
 <param name="mTable">Table name</param>
 <param name="DtSchema">Schema of table</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Data.SqlClient.SqlCommand@,System.Data.DataRow[],System.String,System.Data.DataTable,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="Lcommand">Command as sql command</param>
 <param name="mRows">An array of datarows  to be  inserted</param>
 <param name="mTable">Table name</param>
 <param name="DtSchema">Schema of table</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertUpdateDeleteSqlTables(System.Object@)">
 <summary>
 Insert Records  to  multiple SQL Tables in a single batch execution.
 </summary>
 <param name="TableClassObject">An Class objects of tables</param>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateValuesToSqlRecords(System.String,System.Collections.Hashtable,System.String,System.Collections.Hashtable,System.String,System.Boolean@)">
 <summary>
 Update Record field's values of  an SQL Table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="ValueSource">Updating values as hashtable, where columnname as key and fieldvalue as hashtable value </param>
 <param name="TargetTable">Name of table in which record updated</param>
 <param name="WhereClause">Condition for which records updated</param>
 <param name="WhereClauseHash">composite Condition for which records updated (Keys are fieldnames </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateValuesToSqlRecords(System.String,System.Data.DataRow,System.String,System.Collections.Hashtable,System.String,System.Boolean@)">
 <summary>
 Update Record field's values of  an SQL Table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="ValueSource">Updating values in datarow , where columnnames are fieldNames </param>
 <param name="TargetTable">Name of table in which record updated</param>
 <param name="WhereClause">Condition for records updated</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateValuesToSqlRecords(System.Data.SqlClient.SqlTransaction@,System.Data.DataRow,System.String,System.Collections.Hashtable,System.String,System.Boolean@)">
 <summary>
 Update Record field's values of  an SQL Table
 </summary>
 <param name="mSqlTransanction">sql transanction already created</param>
 <param name="ValueSource">Updating values in datarow , where columnnames are fieldNames </param>
 <param name="TargetTable">Name of table in which record updated</param>
 <param name="WhereClause">Condition for records updated</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateValuesToSqlRecords(System.Data.SqlClient.SqlTransaction@,System.Collections.Hashtable,System.String,System.Collections.Hashtable,System.String,System.Boolean@)">
 <summary>
 Update Record field's values of  an SQL Table
 </summary>
 <param name="mSqlTrans">sql transanction already created</param>
 <param name="ValueSource">Updating values in HashTable , where columnnames are keys of hashtable </param>
 <param name="TargetTable">Name of table in which record updated</param>
 <param name="WhereClause">Condition for records updated</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="LTableName">Sql Table Nale</param>
 <param name="PrimaryKeyName">Primary Key field name on which searching to be done</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlTransaction@,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="SqlStr">Sql query</param>
 <returns>datarow if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.Int32,System.Boolean,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="LTableName">Sql Table Nale</param>
 <param name="PrimaryKeyName">Primary Key field name on which searching to be done</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="RowStatusFlag" ></param>
 <param name="FieldsList">comma separated fields to be fetched in datarow</param>
 <returns>row if found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordByTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Int32,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="ClsObject">Sql Table Nale</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="UniqueField" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordByTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.String,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="ClsObject">Sql Table Nale</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="UniqueField" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordByTableClass(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Collections.Hashtable)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="Ltransaction">Sql Transaction already specified</param>
 <param name="ClsObject">Sql Table Nale</param>
 <param name="WhereClause" >A hashtable to define whereclause ,where key is fieldname and value is field value</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableClass(System.Object@,System.Int32,System.String@)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ClsObject">Sql Table Name</param>
 <param name="SearchKeyValue">uniquefield value of row to be fetched</param>
 <param name="SearchFieldName" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordTableObject(System.Object@,System.String,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ClsObject">Sql Table Name</param>
 <param name="SearchKeyValue">uniquefield value of row to be fetched</param>
 <param name="SearchFieldName" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekFlagTableObject(System.Object@,System.Int32,System.String)">
 <summary>
 check   key if exists in  a Sql table
 </summary>
 <param name="ClsObject">Sql Table Nale</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="SearchFieldName" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekFlagTableObject(System.Object@,System.String,System.String)">
 <summary>
 check   key if exists in  a Sql table
 </summary>
 <param name="ClsObject">Sql Table Nale</param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="SearchFieldName" ></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.Data.SqlClient.SqlTransaction@,System.String,System.Collections.Hashtable)">
 <summary>
 check   key if exists in  a Sql table
 </summary>
 <param name="MyTrans"></param>
 <param name="TableName"></param>
 <param name="HCondition"></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String)">
 <summary>
 check   key if exists in  a Sql table
 </summary>
 <param name="MyTrans"></param>
 <param name="TableName"></param>
 <param name="LCondition"></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlTransaction@,System.String,System.Collections.Hashtable,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="MyTrans"></param>
 <param name="TableName"></param>
 <param name="HCondition"></param>
 <param name="FieldsList">Comma separated fields to be fetched</param>
 <returns> row if found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlTransaction@,System.String,System.String,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="MyTrans"></param>
 <param name="TableName"></param>
 <param name="LCondition"></param>
 <param name="FieldsList">Comma separated fields to be fetched</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekFlagTableObject(System.String,System.Object@)">
 <summary>
 check   key if exists in  a Sql table
 </summary>
 <param name="WhereClause"></param>
 <param name="ClsObject">Sql Table Nale</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.String,System.String,System.String,System.Int32,System.Boolean,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="SearchField" >Source Table SearchField name </param>
 <param name="SearchKeyValue">SearchField value of row to be fetched</param>
 <param name="RowStatusFlag" ></param>
 <param name="FieldsList">Comma separated fields to be fetched</param>
 <returns>DataRow of keyValue</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordRow(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="SearchField" >Source Table Search field name </param>
 <param name="SearchKeyValue">Primary key field value of row to be fetched</param>
 <param name="RowStatusFlag" ></param>
 <returns>DataRow of keyValue</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecordClsObject(System.Object@,System.Int32,System.String)">
 <summary>
 To delete  row from Sql Table on specified primary key. 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="SearchValue" >SearchKeyValue to be searched</param>
 <param name="UniqueField" ></param>
 <returns>Rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecordClsObject(System.Object@,System.Collections.Hashtable)">
 <summary>
 To delete  row from Sql Table on specified primary key. 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="WhereClause" >Condition Hash Table</param>
 <returns>Rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DeleteRecordClsObject(System.Object@,System.String)">
 <summary>
 To delete  row from Sql Table on specified primary key. 
 </summary>
 <param name="ClsObject" >Class object of Sql table</param>
 <param name="WhereClause" >Condition Hash Table</param>
 <returns>Rows affected</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetConditionExpressionOnAllRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String[]@)">
 <summary>
 Fetch  all  values of a fieldname in a string array,return an sql  condition expression for where clause
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="SourceFieldName" >Name of field of source table which values to be considered</param>
 <param name="TargetFieldName" >Name of field of condition expression</param>
<param name="mOperator" >Equaily operator i.e  "="  or  "#" for not equal  </param>
 <param name="mLogicGate" >AND or  OR  used in condition expression</param>
 <param name="FieldValues" >A string arrays of field values</param>
 <returns>Condition clause as string</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetConditionExpressionOnAllRows(System.Data.DataTable@,System.String,System.String,System.String,System.String,System.String[]@)">
 <summary>
 Fetch  all  values of a fieldname in a string array,return an sql  condition expression.
 </summary>
 <param name="LdataTable" >DataTable as datatable </param>
 <param name="SourceFieldName" >Name of field of source table which values to be considered</param>
 <param name="TargetFieldName" >Name of field of condition expression</param>
<param name="mOperator" >Equaily operator i.e  "="  or  "#" for not equal  </param>
 <param name="mLogicGate" >AND or  OR  used in condition expression</param>
 <param name="FieldValues" >A string arrays of field values</param>
 <returns>Condition clause as string</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekDataRow(System.String,System.String,System.Collections.Hashtable)">
 <summary>
 Fetch  row of all fields as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="SearchKeyValue">A hash table containg Primary key field as key and value as item</param>
 <returns>data row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.String,System.String,System.Collections.Hashtable)">
 <summary>
 check  datarow in a Sql table on a hash condition.
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="SearchKeyValue">A hash table containg Primary key field as key and value as item</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.String,System.String,System.String,System.String)">
 <summary>
 check  datarow in a Sql table on a hash condition.
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="lwhere">A hash table containg Primary key field as key and value as item</param>
 <param name="AnyField">Any fieldname which is member of source table</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Boolean@,System.String)">
 <summary>
 check  datarow in a Sql table on a hash condition.
 </summary>
 <param name="SqlConn">An open sqlconnection</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="lwhere">An string condition to get  primary key field as key and value as item</param>
 <param name="RowStatusFlag"></param>
 <param name="AnyField">Any fieldname which is member of source table</param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecordBoolean(System.String,System.String,System.String,System.Boolean@,System.String@)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="WhereClause"></param>
 <returns>True if row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.String,System.String,System.String,System.Boolean@,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="Lcondition">A string type sql condition</param>
 <param name="RowStatusFlag"></param>
 <param name="FieldsList">comma separated fields to be fetched in datarow</param>
 <returns>Data row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Boolean@,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="SqlConn">SqlConnection</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <param name="Lcondition">A string type sql condition</param>
 <param name="RowStatusFlag"></param>
 <param name="FieldsList">comma separated fields to be fetched in datarow</param>
 <returns>Data row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="SqlConn">SqlConnection</param>
 <param name="SqlStr">Source table name or full identifier table name</param>
 <returns>Data row is found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SeekRecord(System.String,System.String,System.Collections.Hashtable,System.Boolean@,System.String)">
 <summary>
 Fetch  row as datarow  from a Sql table
 </summary>
 <param name="ServerDataBase">Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format</param>
 <param name="SearchValues">A hash table containg Primary key field as key and value as item</param>
 <param name="SourceTableName">Source table name or full identifier table name</param>
 <returns> datarow found</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SortDataTableOld(System.Data.DataTable,System.String,System.String)">
 <summary>
 To sort a datatable on specified columns
 </summary>
 <param name="DtTable">DataTable to be sorted</param>
 <param name="SortedOnColumns">Comma separated string of column names on which sorting executed eg "Col1,Col2,col3" ,if SortOrder not defined it is ascending by default </param>
 <param name="SortingDirection">Default value is "ASC" ,Permissible values are ASC,DESC and * =Set sort direction with column name eg. "column1 ASC ,column2 DESC" etc.</param>
 <returns>Return sorted datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SortDataTable(System.Data.DataTable,System.String,System.String)">
 <summary>
 To sort a datatable on specified columns
 </summary>
 <param name="DtTable">DataTable to be sorted</param>
 <param name="SortedOnColumns">Comma separated string of column names on which sorting executed eg "Col1,Col2,col3" ,if SortOrder not defined it is ascending by default </param>
 <param name="SortingDirection">Default value is "ASC" ,Permissible values are ASC,DESC and * =Set sort direction with column name eg. "column1 ASC ,column2 DESC" etc.</param>
 <returns>Return sorted datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SortFilterDataTable(System.Data.DataTable@,System.String[],System.String,System.String)">
 <summary>
 This function sorts and filter a datatable on  columns and expression  specified
 </summary>
 <param name="LDataTable">DataTable to be sorted</param>
 <param name="SortColumns">An array of column names on which datatable sorted</param>
 <param name="SortingDirection">Default value is "ASC" ,Permissible values are ASC,DESC and * =Set sort direction with column name eg. "column1 ASC ,column2 DESC" etc.</param>
 <param name="FilterString">Filter expression string eg "Column1 = 'Value1" </param>
 <returns>Sorted DataTable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SortFilterDataTable(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 This function sorts and filter a datatable on  columns and expression  specified
 </summary>
 <param name="LDataTable">DataTable to be sorted</param>
 <param name="SortColumns">Comma separated column names on which datatable sorted</param>
 <param name="SortingDirection">Default value is "ASC" ,Permissible values are ASC,DESC and * =Set sort direction with column name eg. "column1 ASC ,column2 DESC" etc.</param>
 <param name="FilterString">Filter expression string eg "Column1 = 'Value1" </param>
 <returns>Sorted DataTable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTable(System.Data.DataTable@,System.String,System.Boolean)">
 <summary>
 Search datatable on a specified condition.
 </summary>
 <param name="LDataTable">Table to be saerched </param>
 <param name="FilterString">Filter condition as string eg. column1=Value1 and column2> Value2 etc.</param>
 <param name="OnlyFirst">False if return datatable contains only first row of specified criteria</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstRow(System.Data.DataTable@,System.String)">
 <summary>
 Search datatable on a specified condition and return first row.
 </summary>
 <param name="LDataTable">Table to be saerched </param>
 <param name="FilterString">Filter condition as string eg. column1=Value1 and column2> Value2 etc.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetCellValue(System.Data.DataTable@,System.String,System.Int32,System.String,System.Object)">
 <summary>
 Get Cell value from a data table.
 </summary>
 <param name="LDataTable">Data table </param>
 <param name="LColumnName" >Column Name of cell</param>
 <param name="RowNo" >Row no of cell</param>
 <param name="ValueType">Permissible values are String,Integer,Date and default is string</param> 
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetCellValue(System.Data.DataTable@,System.String,System.String,System.String,System.Object)">
 <summary>
 Get Cell value from a data table.
 </summary>
 <param name="LDataTable">Data table </param>
 <param name="LColumnName" >Column Name of cell</param>
 <param name="PrimaryValue" >Primary column value to get Row of the cell</param>
 <param name="ValueType">Permissible values are String,Integer,Date and default is string</param> 
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetCellValue(System.Data.DataTable@,System.Int32,System.String,System.String,System.Object)">
 <summary>
 Get Cell value from a data table.
 </summary>
 <param name="LDataTable">Data table </param>
 <param name="PrimarySearchValue" >primary search value no of cell</param>
 <param name="LColumnName" >Column Name of cell</param>
 <param name="ValueType">Permissible values are String,Integer,Date,boolean,object and default is String</param> 
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetCellValue(System.Data.DataRow,System.String,System.String,System.Object)">
 <summary>
 Get Cell value from a data table.
 </summary>
 <param name="LDataRow">DataRow of cell </param>
 <param name="LColumnName" >Column Name of cell</param>
 <param name="ValueType">Permissible values are String,Integer,Date,Boolean,object and default is string</param> 
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetCellValue(System.Data.DataRow,System.Int32,System.String,System.Object)">
 <summary>
 Get Cell value from a data table.
 </summary>
 <param name="LDataRow">DataRow of cell </param>
 <param name="ColumnIndex" >Column Name of cell</param>
 <param name="ValueType">Permissible values are String,Integer,Date,Boolean,object and default is string</param> 
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.Object@,System.Object,System.String)">
 <summary>
 Assign value to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetObjectByType(System.String,System.String)">
 <summary>
 Assign value to object
 </summary>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.Data.DataRow@,System.Data.DataRow)">
 <summary>
 Assign datarow value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.String@,System.String)">
 <summary>
 Assign string value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.Int32@,System.Int32)">
 <summary>
 Assign Integer value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.Collections.Hashtable@,System.Collections.Hashtable)">
 <summary>
 Assign HashTable value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.DateTime@,System.DateTime)">
 <summary>
 Assign DateTime value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetObjectValue(System.Data.DataTable@,System.Data.DataTable)">
 <summary>
 Assign DateTime value  to object
 </summary>
 <param name="TargetControl"></param>
 <param name="ValueToBeSet"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Data.DataRow@,System.String,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="TargetDataRow"></param>
 <param name="LColumnName"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInPrevious">Add Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Data.DataRow@,System.Int32,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="TargetDataRow"></param>
 <param name="ColumnIndex"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInPrevious">Add  Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Data.DataTable@,System.Int32,System.Int32,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="TargetDataTable"></param>
 <param name="RowNo"></param>
 <param name="ColumnIndex"></param>
 <param name="ValueToBeSet"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <param name="SetValueType"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Data.DataTable@,System.Int32,System.String,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="TargetDataTable"></param>
 <param name="RowNo"></param>
 <param name="LColumnName"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Int32,System.Data.DataTable@,System.Int32,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="PrimarySearchValue"></param>
 <param name="TargetDataTable"></param>
 <param name="ColumnIndex"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Int32,System.Data.DataTable@,System.String,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="PrimarySearchValue"></param>
 <param name="TargetDataTable"></param>
 <param name="LColumnName"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Collections.Hashtable,System.Data.DataTable@,System.String,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="SearchingKey"></param>
 <param name="TargetDataTable"></param>
 <param name="LColumnName"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCellValue(System.Collections.Hashtable,System.Data.DataTable@,System.Int32,System.Object,System.String,System.Boolean@)">
 <summary>
 Assign value to cellcontrol
 </summary>
 <param name="SearchingKeys"></param>
 <param name="TargetDataTable"></param>
 <param name="ColumnIndex"></param>
 <param name="ValueToBeSet"></param>
 <param name="SetValueType"></param>
 <param name="AddInValue">Add Set Value to existing value of cell</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRowIndex(System.Data.DataTable@,System.String,System.Boolean)">
 <summary>
 Search DataTable on a specified condition
 </summary>
 <param name="LDataTable"></param>
 <param name="FilterString"></param>
 <param name="OnlyFirst"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndex(System.Data.DataTable@,System.String)">
 <summary>
 Search DataTable on a specified condition
 </summary>
 <param name="LDataTable"></param>
 <param name="FilterString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataRowValuesByColumns(System.Data.DataRow,System.String[])">
 <summary>
 Fetch the array of column values from the given datarow and columnames array
 </summary>
 <param name="LDataRow ">DataTable to be sorted</param>
 <param name="RowColumns ">An array of column namesd</param>
 <returns>Array of object values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataRowValuesByColumns(System.Data.DataRow,System.String)">
 <summary>
 Fetch the array of column values from the given datarow and columnames array
 </summary>
 <param name="LDataRow ">DataTable to be sorted</param>
 <param name="RowColumns ">Comma separated string  of column names</param>
 <returns>Array of object values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDistinctRowsFromDataTable(System.Data.DataTable@,System.String,System.Boolean)">
 <summary>
 This function creates a unique/distinct rows datatable on  specified columns from a datatable to remove duplicacy of specified columns.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="UniqueColumns ">Comma separated column names   specified columns on which distinct clause executed eg. "Column1,Column2, .  } etc.</param>
<param name="SameColumns" >false if unique file has only unique columns specified,true if returming datatable has same schema</param>
 <returns>Unique rows datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddTwoDataTables(System.Data.DataTable,System.Data.DataTable,System.Boolean,System.Boolean)">
 <summary>
 This function adds two datatables of same structure creates a new data table.
 </summary>
 <param name="FirstDataTable">First data table to be added</param>
 <param name="SecondDataTable">Second data table to be added</param>
 <param name="IgnoreDuplicateRows">Ignore duplicate rows</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateDataTables(System.Data.DataTable,System.Data.DataTable,System.Boolean,System.String,System.String)">
 <summary>
 This function updates all rows of firstdatatable according to second datatable.
 </summary>
 <param name="FirstDataTable">First data table to be updated.</param>
 <param name="SecondDataTable">Second data table from column's value updated.</param>
 <param name="RemoveExcessRows" >Remove excess rows of first datatable w.r.to second datatable.</param>
 <param name="UpdatingColumns" >Comma separated columnnames of firstdatatable to be updated,if exist in second datatable,* for all</param>
 <param name="IgnoreColumns">Comma separated columnnames of firstdatatable to be ignored for updation</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdateDataRows(System.Data.DataRow,System.Data.DataRow,System.String,System.String)">
 <summary>
 This function updates FirstDataRow  according to SecondDataRow.
 </summary>
 <param name="FirstDataRow">First data table to be updated.</param>
 <param name="SecondDataRow">Second data table from column's value updated.</param>
 <param name="UpdatingColumns" >Comma separated columnnames of firstdatarow to be updated,if exist in second datarow,* for all</param>
 <param name="IgnoreColumns">Comma separated columnnames of firstdatarow to be ignored for updation</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RenameDataTableColumn(System.Data.DataTable@,System.String,System.String)">
 <summary>
 This function rename oldcolumnname to newcolumnname of a datatable.
 </summary>
 <param name="LDataTable" >DataTable in which columns renamed</param>
 <param name="OldColumnName" >Column name to be renamed</param>
 <param name="NewColumnName" >New Column Name </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataRows(System.Data.DataRow@,System.Data.DataRow@,System.String@)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstDataRow">First data row to be compared</param>
 <param name="SecondDataRow">Second data row to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>If matched return true</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdatedColumnsStrInDataRows(System.Data.DataRow@,System.Data.DataRow@,System.String@)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstDataRow">First data row to be compared</param>
 <param name="SecondDataRow">Second data row to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>Mismatched columns comma separated </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoValueObjects(System.Object@,System.Object@,System.String@)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstValue">First data value to be compared</param>
 <param name="SecondValue">Second data value to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>If matched return true</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoHashTables(System.Collections.Hashtable@,System.Collections.Hashtable@,System.String)">
 <summary>
 Compare two hashtables 
 </summary>
 <param name="FirstHashTable">First hash table to be compared</param>
 <param name="SecondHashTable">Second hash table to be compared</param>
 <param name="ExcludeKeys" >Comma separated list of keys to be excluded for comparing HashTables</param>
 <returns>If matched return true</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataRowColumns(System.Data.DataRow@,System.Data.DataRow@,System.String@)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstDataRow">First data row to be compared</param>
 <param name="SecondDataRow">Second data row to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>Comma separated column names of first table which values not equal to second table column's value</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CheckRowInDataTable(System.Data.DataRow@,System.Data.DataTable@,System.String@,System.String)">
 <summary>
 Check  row if it exists in a datatable and return its row index ,-1 if not found 
 </summary>
 <param name="SearchingRow">DataRow is being Checked for existence</param>
 <param name="TableToBeSearched">Table object where above row to be searched</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>Return first row index of table if found, otherwise -1</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowInDataTable(System.Data.DataRow@,System.Data.DataTable@,System.String@,System.String@,System.String@)">
 <summary>
 Check  row if it exists in a datatable and return its row index ,-1 if not found 
 </summary>
 <param name="SearchingRow">DataRow is being Checked for existence</param>
 <param name="TableToBeSearched">Table object where above row to be searched</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>Return first row index of table if found, otherwise -1</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetPrimaryColumns(System.Data.DataRow@)">
 <summary>
 Get Primary column names  of a datarow as list
 </summary>
 <param name="mDataRow"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetPrimaryColumns(System.Data.DataTable@)">
 <summary>
 Get Primary column names  of a datatable as list
 </summary>
 <param name="mDataTable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CheckColumnInDataTable(System.String,System.Data.DataTable)">
 <summary>
 Check  ColumnName if it exists in a DataTable and return its column index ,-1 if not found 
 </summary>
 <param name="ColumnName" >ColumnName to be searched</param>
<param name="TableToBeSearched" >TableName being searched</param>
 <returns >Return column index in table if found, otherwise -1</returns>
 <remarks ></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataTableRows(System.Data.DataTable@,System.Data.DataTable@)">
 <summary>
 Compare FirstDataTableRows to SecondDataTable rows and return index() of SecondDataTable rows not found in first table
 </summary>
 <param name="FirstDataTable">Table to be searched</param>
 <param name="SecondDataTable">Table being searched</param>
 <returns>Mismatched array of row indexes of Second Data Table as integer</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTwoDataTables(System.Data.DataTable@,System.Data.DataTable@,System.String@)">
 <summary>
 Compare FirstDataTableRows to SecondDataTable rows and return  mismatched flag 
 </summary>
 <param name="PreviousDataTable">Table being searched</param>
   <param name="CurrentDataTable">Table to be searched</param>
 <param name="ExcludeColumns" >Comma separated ColumnNames which are excluded from comparing</param>
 <returns>CompareFlag as True or False</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareTablePrevDtCurrDt(System.Object@)">
 <summary>
 Compare Previous DataTable Rows to Current DataTable Rows and return Row index array of on SecondDataTable rows not found in first table
 </summary>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompareDataColumns(System.Data.DataTable,System.Data.DataTable,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@)">
 <summary>
 Compare columns of two data tables and get missing columns
 </summary>
 <param name="FirstDataTable">First Data Table whoose columns compared</param>
 <param name="SecondDataTable">Second Data Table whoose columns compared</param>
 <param name="MissingColumns">Missing columns in second table as hashtable where key is columnname and value is type</param>
 <param name="MismatchColumnsTYpe" >Mismattched columns types  in second table as hashtable where key is columnname and value is type</param>
 <param name="ExtraColumns">Extra columns in second table as hashtable where key is columnname and value is type</param>
 <param name="SameColumns">Same columns in second table as hashtable where key is columnname and value is type</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRowIndex(System.Data.DataTable@,System.String[],System.Object[],System.Boolean)">
 <summary>
 Searching a DataTable row on  columns() with values() and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumns  ">An array of  column names eg. {"Column1","Column2", .  } etc.</param>
<param name="SearchValues" >An array of values eg. {value1,value2,value3..  </param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndex(System.Data.DataTable@,System.String[],System.Object[])">
 <summary>
 Searching a DataTable row on  columns() with values() and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumns  ">An array of  column names eg. {"Column1","Column2", .  } etc.</param>
<param name="SearchValues" >An array of values eg. {value1,value2,value3..  </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRowIndexSingleColumn(System.Data.DataTable@,System.String,System.Object,System.Boolean)">
 <summary>
 Searching a DataTable row on  a column with value and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumn  ">column name as string</param>
<param name="SearchValue" >Column value  as object.  </param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndexSingleColumn(System.Data.DataTable@,System.String,System.Object)">
 <summary>
 Searching a DataTable row on  a column with value and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumn  ">column name as string</param>
<param name="SearchValue" >Column value  as object.  </param>
 <returns>An integer  of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRow(System.Data.DataTable@,System.String,System.Object)">
 <summary>
 Searching a DataTable row on  a column with value and return a datarow
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumn  ">column name as string</param>
<param name="SearchValue" >Column value  as object.  </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRowIndex(System.Data.DataTable@,System.String,System.String,System.Boolean)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumns  ">Comma separated column name as string</param>
<param name="SearchValues" >Comma separated Column values  as string.  </param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndex(System.Data.DataTable@,System.String,System.String)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumns  ">Comma separated column name as string</param>
<param name="SearchValues" >Comma separated Column values  as string.  </param>
 <returns>An integer  of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndex(System.Data.DataTable@,System.String,System.Int32)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumn  ">column name as string</param>
<param name="SearchValue" >Column value  as integer.  </param>
 <returns>An integer  of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataGridViewRowIndex(System.Windows.Forms.DataGridView,System.String,System.String,System.Boolean)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LGridView">DataGridViewe is being searched</param>
 <param name="SearchColumns  ">Comma separated column name as string</param>
<param name="SearchValues" >Comma separated Column values  as string.  </param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataGridViewFirstIndex(System.Windows.Forms.DataGridView,System.String,System.String)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LGridView">DataGridViewe is being searched</param>
 <param name="SearchColumns  ">Comma separated column name as string</param>
<param name="SearchValues" >Comma separated Column values  as string.  </param>
 <returns>An integer  of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataGridViewRowIndex(System.Windows.Forms.DataGridView,System.Collections.Hashtable,System.Boolean)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LGridView">DataGridViewe is being searched</param>
 <param name="SearchHashValues  ">A hash table having keys as field names and values as fieldvalues</param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataGridViewFirstIndex(System.Windows.Forms.DataGridView,System.Collections.Hashtable)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LGridView">DataGridViewe is being searched</param>
 <param name="SearchHashValues  ">A hash table having keys as field names and values as fieldvalues</param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstRow(System.Data.DataTable@,System.String,System.String)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchColumns  ">Comma separated column name as string</param>
<param name="SearchValues" >Comma separated Column values  as string.  </param>
 <returns>A datarow with specified condition</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstRow(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Searching a DataTable row on  columns with values and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="SearchFieldValues  ">HashTable Containg the Key is FieldName and value is selectedkeyfieldvalue.</param>
 <returns>A datarow with specified condition</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.Object[])">
 <summary>
 Find a DataTable row on  primary columns() with values() and return Row
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValues" >An array of values of primary columns eg. {value1,value2,value3..  </param>
 <returns>A DataRow having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.Collections.Generic.Dictionary{System.String,System.Int32})">
 <summary>
 Find a DataTable row on  primary columns() with values() and return Row
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchKeyValues" >A Dictionary of having values in integerto be searched,hashset key is column names</param>
 <returns>A DataRow having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.Object)">
 <summary>
 Find a DataTable row on   primary column with value and return Row
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValue" >value of primary column..  </param>
 <returns>A DataRow having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.Int32)">
 <summary>
 Find a DataTable row on   primary column with value and return Row
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValue" >value of primary column..  </param>
 <returns>A DataRow having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.String)">
 <summary>
 Find a DataTable row on string type   primary column with value and return Row
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValues" >Comma separated values of primary column..  </param>
 <returns>A DataRow having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowIndexByPrimaryCols(System.Data.DataTable@,System.Object[])">
 <summary>
 Find a DataTable row on  primary columns() with values() and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValues" >An array of values of primary columns eg. {value1,value2,value3..  </param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowIndexByPrimaryCols(System.Data.DataTable@,System.Collections.Generic.List{System.Object})">
 <summary>
 Find a DataTable row on  primary columns() with values() and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValues" >An array of values of primary columns eg. {value1,value2,value3..  </param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowIndexByPrimaryCols(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Find a DataTable row on  primary columns() with values() and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="PrimaryKeyHashTable" >A hashtable having keys as primary columns and values are primary key values.  </param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindAndInsertValue(System.Data.DataTable@,System.Collections.Hashtable,System.String,System.Object@,System.Boolean,System.Boolean)">
 <summary>
 Find a DataTable row on  primary columns() with values() and and set value in columnname and  return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="PrimaryKeyHashTable" >A hashtable having keys as primary columns and values are primary key values.  </param>
<param name="ValueColumn">Column name where  valuetobeset</param>
<param name="ValueToBeSet"></param>
<param name="AddNewRow">Add new in datatable if row not founf</param>
<param name="AddInPrevous">add valuetobeset in prevoius of cell</param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowByPrimaryCols(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Find a DataTable row on  primary columns() with values() and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="PrimaryKeyHashTable" >A hashtable having keys as primary columns and values are primary key values.  </param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowIndexByPrimaryCols(System.Data.DataTable@,System.Object)">
 <summary>
 Find a DataTable row on  primary columns with value and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValue" >value of primary column to be found..  </param>
 <returns>A DataRow index as integer  having primary key of value</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindAndInsertValue(System.Data.DataTable@,System.Object,System.String,System.Object@,System.Boolean,System.Boolean)">
 <summary>
 Find a DataTable row on  primary columns() with values() and and set value in columnname and  return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="PrimaryKeyValue" >A hashtable having keys as primary columns and values are primary key values.  </param>
<param name="ValueColumn">Column name where  valuetoset</param>
<param name="ValueToBeSet"></param>
<param name="AddNewRow">Add new in datatable if row not founf</param>
<param name="AddInPrevous">add valuetobeset in prevoius of cell</param>
 <returns>A DataRow index as integer  having primary keys of values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FindRowIndexByPrimaryCols(System.Data.DataTable@,System.String)">
 <summary>
 Find a DataTable row on  primary columns with value and return RowIndex
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
<param name="SearchValues" >Comma separated values of string primary column to be found..  </param>
 <returns>A DataRow index as integer  having primary key of value</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableRowIndex(System.Data.DataTable@,System.Collections.Hashtable,System.Boolean)">
 <summary>
 Searching a DataTable row on  columns() with values() and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="ColumnValuePair" >A hashtable oject of columns where key is columnname and value is column value</param>
<param name="OnlyFirstIndex" >True=Only first row index returned to match the criteria </param>
 <returns>An integer array of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTableFirstIndex(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 Searching a DataTable row on  columns() with values() and return RowIndex()
 </summary>
 <param name="LDataTable">DataTable is being searched</param>
 <param name="ColumnValuePair" >A hashtable oject of columns where key is columnname and value is column value</param>
 <returns>An integer  of rowindex</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddingNameForCodes(System.Data.DataTable@,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String)">
 <summary>
Adding Name column and its value to a datatable corresponding to its code value searching from a code master data table
 </summary>
 <param name="LDataTable">DataTable object on which name columns added</param>
 <param name="TableCodeFields">Comma separated string of column names of table,their values to be searched in code master</param>
 <param name="AddingName" >ColumnName to be inserted in ldatatable for name value of masternamefield</param>
 <param name="CodeMaster">A datatable having columns corressponding to TableKeyColumn and TableNameColumn</param>
 <param name="MasterCodeFields">Comma separated string of column names of CodeMastertable to be linked</param>
 <param name="MasterNameField">ColumnName of CodeMaster table which contains the name</param>
 <param name="AddCodeInName" >"P" if table column code is added as prefix,"S" if table column code is added as suffix,"N" for do not add</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddingNameColumnsForCodes(System.Data.DataTable@,System.String,System.String,System.Data.DataTable,System.String,System.String)">
 <summary>
Adding Name columns and its value to a datatable corresponding to its code value searching from a code master data table
 </summary>
 <param name="LDataTable">DataTable object on which name columns added</param>
 <param name="TableCodeFields">Comma separated string of column names of table,their values to be searched in code master</param>
 <param name="AddingNames" >Corresponding comma separated ColumnNames to be inserted in ldatatable for name value of masternamefield</param>
 <param name="CodeMaster">A datatable having a primary key with values corressponding to columns of TableCodeFields</param>
 <param name="MasterCodeFields">Comma separated string of column names of CodeMasterTable to be linked</param>
 <param name="MasterNameField">ColumnName of CodeMaster table which contains the name</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.Collections.Hashtable,System.String)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNamesValuePair">A hash table containing column names as key and value as column value</param>
 <param name="Lcondition">Condition string eg.  "Column1 = 'Value1' etc.</param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.Collections.Hashtable,System.Collections.Hashtable,System.Boolean,System.String,System.String)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNamesValuePair">A hash table containing column names as key and value as column value</param>
 <param name="Hcondition">Condition HashTable where key is column names and values are column values,nothing for none.</param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNames">A comma separated string of  column names</param>
 <param name="ColumnValues" >A comma  separated string of  column values</param>
 <param name="Lcondition">Condition string eg.  "Column1 = 'Value1' etc.</param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.String,System.Int32,System.String)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNames">A comma separated string of  column names</param>
 <param name="ColumnValue" >A common  Integer value to be replaced</param>
 <param name="Lcondition">Condition string eg.  "Column1 = 'Value1' etc.</param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.String,System.String,System.String,System.Object)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNames">A comma separated string of  column names</param>
 <param name="ColumnValues" >A comma  separated string of  column values</param>
 <param name="ConditionColumn"></param>
 <param name="ConditionColValue"></param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.Collections.Hashtable,System.String,System.Object)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNamesValuePair"></param>
 <param name="ConditionColumn"></param>
 <param name="ConditionColValue"></param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDataTable(System.Data.DataTable@,System.String,System.String,System.Collections.Hashtable,System.Boolean,System.String,System.String,System.Int32@)">
 <summary>
 Replace Column Values into a DataTable of selective rows by a condition 
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNames">A comma separated string of  column names</param>
 <param name="ColumnValues" >A comma  separated string of  column values</param>
 <param name="Hcondition">Condition hash table where key is column name and value is column value.</param>
 <param name="LastRowNo" >Last row no which was replaced</param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReplaceValuesInDTbyPrimaryKey(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Replace Column Values into a DataTable of selective row by primary key value
 </summary>
 <param name="LDataTable">DataTable whoose columns replaced</param>
 <param name="ColumnNames">A comma separated string of  column names</param>
 <param name="ColumnValues" >A comma  separated string of  column values</param>
 <param name="PrimarySearchValue" >Primary key value </param>
 <returns>Final data table </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddingNameForCodesPrimamryCols(System.Data.DataTable@,System.String,System.String,System.Data.DataTable,System.String,System.String)">
 <summary>
Adding Names column and its value to a datatable corresponding to its code value searching from a code master data table
 </summary>
 <param name="LDataTable">DataTable object on which name columns added</param>
 <param name="TableCodeFields">Comma separated  string whoose items are column names of table,their values to be searched in code master</param>
 <param name="AddingName" >Column separated ColumnName to be inserted in ldatatable for name value of masternamefield</param>
 <param name="CodeMasterWithPrimaryColumns">A datatable having Primary columns corressponding to TableCodeFields and TableNameColumn</param>
 <param name="MasterNameField">ColumnName of CodeMaster table which contains the name</param>
 <param name="AddCodeInName" >"P" if table column code is added as prefix,"S" if table column code is added as suffix,"N" for do not add</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FillValuesForBlanks(System.Data.DataTable@,System.String[],System.Object[])">
 <summary>
Fill Values for blank fields in a datatable 
 </summary>
 <param name="LDataTable">Data table to be filled</param>
 <param name="TableCodeFields">Array of field's names to be checked for blank</param>
 <param name="TableValues">Array of field values to be filled</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTable(System.Data.DataTable@,System.String[],System.Object[])">
 <summary>
 This function searches a DataTable on specified columns with values and return datatable satisfying the criteria.
 </summary>
 <param name="LDataTable">DataTable searched on specified columns</param>
 <param name="SearchColumns">An array of  column names eg. {"Column1","Column2", .  } etc.</param>
<param name="SearchValues" >An array of values eg. {value1,value2,value3..  </param>
 <returns>Datatable of specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTable(System.Data.DataTable@,System.String,System.String)">
 <summary>
 This function searches a DataTable on specified columns with values and return datatable satisfying the criteria.
 </summary>
 <param name="LDataTable">DataTable searched on specified columns</param>
 <param name="SearchColumns">Comma separated column names to be searched eg column1,column2,column3} etc.</param>
<param name="SearchValues" >Comma separated string values to be searched eg. {value1,value2,value3..  </param>
 <returns>Datatable of specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTable(System.Data.DataTable@,System.String,System.Int32)">
 <summary>
 This function searches a DataTable on specified column with its integer value and return datatable satisfying the criteria.
 </summary>
 <param name="LDataTable">DataTable searched on specified columns</param>
 <param name="SearchColumn">column name to be searched</param>
<param name="SearchValue" >integer value to be searched  </param>
 <returns>Datatable of specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchStringInDTColumn(System.Data.DataTable@,System.String,System.String,System.Boolean)">
 <summary>
 This function searches a string value into a column of DataTable and return datatable .
 </summary>
 <param name="LDataTable">DataTable to be searched.</param>
 <param name="SearchColumn">Column name to be searched.</param>
<param name="SearchString" >String value to be Sought.  </param>
 <param name="IgnoreCase" >if Searching is not case sensitive.</param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchInSortedDataTable(System.Data.DataTable@,System.String,System.Object,System.Collections.Generic.List{System.Int32}@,System.Boolean,System.String)">
 <summary>
 This function searches  value of  specified column of Sorted DataTable on specified column .
 </summary>
 <param name="LDataTable">DataTable to be searched originally sorted on SearchColumns.</param>
 <param name="SearchColumn">column name ,whoose value to be searched.</param>
<param name="SearchValue" >column value to be Sought.  </param>
<param name="RowsList">Row indexes list to be searched in original tableof </param>
 <param name="SoftSeek" >Flag ,If True ,return list of first RowIndex  of columnvalue >= searchvalu</param>
<param name="OutputOnSorting">Comma separated ColumnNames for sorting </param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchInSortedDataTable(System.Data.DataTable@,System.String,System.Object,System.Boolean)">
 <summary>
 This function searches  value of  specified column of Sorted DataTable on specified column .
 </summary>
 <param name="LDataTable">DataTable to be searched originally sorted on SearchColumns.</param>
 <param name="SearchColumn">column name ,whoose value to be searched.</param>
<param name="SearchValue" >column value to be Sought.  </param>
 <param name="SoftSeek" >Flag ,If True ,return list of first RowIndex  of columnvalue >= searchvalu</param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchInSortedDtTable(System.Data.DataTable@,System.String,System.Object,System.Boolean,System.String)">
 <summary>
 This function searches  value of  specified column of Sorted DataTable on specified column .
 </summary>
 <param name="LDataTable">DataTable to be searched originally sorted on SearchColumns.</param>
 <param name="SearchColumn">column name ,whoose value to be searched.</param>
<param name="SearchValue" >column value to be Sought.  </param>
 <param name="SoftSeek" >Flag ,If True ,return list of first RowIndex  of columnvalue >= searchvalu</param>
<param name="OutputOnSorting">Comma separated ColumnNames for sorting </param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RowIndexListToDataTable(System.Data.DataTable@,System.Collections.Generic.List{System.Int32}@,System.String)">
 <summary>
 This function convert row index list into new datatable.
 </summary>
 <param name="LDataTable">DataTable to be searched originally sorted on SearchColumns.</param>
<param name="RowsList">Row indexes list to be included in new table</param>
<param name="OutputOnSorting">Comma separated ColumnNames for sorting </param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchInSortedDataTable(System.Data.DataTable@,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Boolean)">
 <summary>
 This function searches  value of  specified column of Sorted DataTable on specified column .
 </summary>
 <param name="LDataTable">DataTable to be searched originally sorted on SearchColumns.</param>
 <param name="SearchCols">A List of column names to be searched.</param>
 <param name="SearchVals">A List of column values to be searched</param>
<param name="OutputOnSorting">Comma separated ColumnNames for sorting </param>
 <param name="SoftSeek" >Flag ,If True ,return list of first RowIndex  of columnvalue >= searchvalue</param>
 <returns>Datatable on specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsFromDataTable(System.Data.DataTable@,System.String,System.String)">
 <summary>
 This function searches a DataTable on specified columns with values and return datatable after removing the rows that satisfy the criteria.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="SearchColumns  ">Comma separated column names to be searched eg column1,column2,column3} etc.</param>
<param name="SearchValues" >Comma separated string values to be searched eg. {value1,value2,value3..  </param>
 <returns>Datatable after removing rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsFromDataTable(System.Data.DataTable@,System.Collections.Hashtable,System.Boolean,System.String,System.String)">
 <summary>
 Removed specified rows from a table.
 </summary>
 <param name="LDataTable">DataTable</param>
 <param name="HashColumnValues  ">A Hashtable having the keys are column names and values are column values.</param>
 <returns>Datatable after removing rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowFromDataTable(System.Data.DataTable@,System.Int32)">
 <summary>
 Remove data row from a datatable on primary key.
 </summary>
 <param name="LDataTable">DataTable   </param>
<param name="PrimarySearchValue" >Value of primary key to be removed  </param>
 <returns>Datatable after removing rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsFromDataTable(System.Data.DataTable@,System.String,System.Object[])">
 <summary>
 This function searches a DataTable on specified columns with values and return datatable after removing the rows that satisfy the criteria.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="SearchColumns  ">Comma separated column names to be searched eg column1,column2,column3} etc.</param>
<param name="aSearchValues" >An array of value object to be searched eg. {value1,value2,value3..  </param>
 <returns>Datatable after removing rows</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SearchDataTable(System.Data.DataTable@,System.Collections.Hashtable)">
 <summary>
 This function searches a DataTable on specified columns with values and return datatable satisfying the criteria.
 </summary>
 <param name="LDataTable">DataTable to be searched on specified columns</param>
 <param name="SearchColumnsValues  ">A hashtable containg columnnames as keys and column values as valu of hashtable .</param>
 <returns>Datatable of specified criteria</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.TotalOnDataTableOLD(System.Data.DataTable@,System.String,System.String,System.Boolean,System.Collections.Hashtable)">
 <summary>
 This function creates a unique/distinct rows datatable on  specified columns from a datatable and make totals of numeric columns.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="TotalOnColumns">comma separated  column names on which total of numeric columns will be calculated eg. "Column1,Column2, .  } etc.</param>
 <param name="NumericColumns" >comma separated  numeric columns names which are added to get total </param>
 <param name="AllColumns" >if false the returning total table will has TotalOnColumns+Numeric Columns only,if true it has the same columns as original datatable</param>
<param name="ColumnsOfSameValues" >A hashtable which has keys as columnnames,values as columnvalues, which are same for all rows of TotalTable</param>
 <returns>Unique rows datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetPrimaryValueList(System.Data.DataRow@,System.String)">
 <summary>
 Function returns the column values from a datarow as a list in sequence of columns in columnStr (Used get the list of primary columns value list
 </summary>
 <param name="Ldatarow"></param>
 <param name="columnStr"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryValueList(System.Data.DataRow@,System.String,System.Collections.Generic.List{System.Object})">
 <summary>
 option to set primary values in the datarow
 </summary>
 <param name="Ldatarow"></param>
 <param name="columnStr"></param>
 <param name="PrimaryValues"></param>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryValueList(System.Data.DataRow@,System.Collections.Generic.List{System.Object})">
 <summary>
 option to set primary values in the datarow
 </summary>
 <param name="Ldatarow"></param>
 <param name="PrimaryValues"></param>
</member>
<member name="M:DataFunctions.DataFunctions.SetPrimaryValueList(System.Data.DataRow@,System.Collections.Hashtable)">
 <summary>
 option to set primary values in the datarow
 </summary>
 <param name="Ldatarow"></param>
 <param name="PrimaryValues"></param>
</member>
<member name="M:DataFunctions.DataFunctions.GetPrimaryValueList(System.Data.DataRow@)">
 <summary>
 Function returns the column values from a datarow as a list of primary columns 
 </summary>
 <param name="Ldatarow"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.TotalOnDataTable(System.Data.DataTable@,System.String,System.String,System.Boolean,System.Collections.Hashtable)">
 <summary>
 This function creates a unique/distinct rows datatable on  specified columns from a datatable and make totals of numeric columns.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="TotalOnColumns">comma separated  column names on which total of numeric columns will be calculated eg. "Column1,Column2, .  } etc.</param>
 <param name="NumericColumns" >comma separated  numeric columns names which are summed up </param>
 <param name="AllColumns" >if false the returning total table will has TotalOnColumns+Numeric Columns only,if true it has the same columns as original datatable</param>
<param name="ColumnsOfSameValues" >A hashtable which has keys as columnnames,values as columnvalues, which are same for all rows of TotalTable</param>
 <returns>Unique rows datatable</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SumDataTableColumns(System.Data.DataTable@,System.String,System.String)">
 <summary>
 This function creates a unique/distinct rows datatable on  specified columns from a datatable and make totals of numeric columns.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="NumericColumns" >comma separated  numeric columns names which are added to get total </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SumDataTableColumns(System.Data.DataTable@,System.String,System.Collections.Hashtable)">
 <summary>
 This function creates a unique/distinct rows datatable on  specified columns from a datatable and make totals of numeric columns.
 </summary>
 <param name="LDataTable">DataTable with duplicate rows  on specified columns</param>
 <param name="NumericColumns" >comma separated  numeric columns names which are added to get total </param>
 <param name="ConditionHashTable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetParentNodes(System.Data.DataTable,System.String,System.String,System.Boolean)">
 <summary>
 To Get Top Parent nodes/groups(value of parentfield and childfield is same) of from a GroupMasterDataTable  as a list of ParentGroupCodes
 </summary>
 <param name="NodesDataTable">NodesDataTable (sorted on parentfield) datatable where groupcode to be searched </param>
 <param name="ParentFieldName">Name of parent Field in GroupMaster </param>
 <param name="ChildFielName">Name of parent Field in GroupMaster</param>
 <returns>A list  of parent codes</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetTopParentNodes(System.Data.DataTable,System.String,System.String)">
 <summary>
 To Get Top Parent nodes/groups(value of parentfield and childfield is same) of from a GroupMasterDataTable  as a list of ParentGroupCodes
 </summary>
 <param name="NodesDataTable">NodesDataTable (sorted on parentfield) datatable where groupcode to be searched </param>
 <param name="ParentFieldName">Name of parent Field in GroupMaster </param>
 <param name="ChildFielName">Name of parent Field in GroupMaster</param>
 <returns>A list  of parent codes</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetChildNodes(System.Data.DataTable,System.Collections.Generic.List{System.Int32},System.String,System.String)">
 <summary>
 To Get all  lower level nodes  from  a  DataTable which have no further child.
 </summary>
 <param name="NodeTable">Datatable where NodeFieldName to be searched </param>
 <returns>An array of parent codes</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDateTimeISTNow">
 <summary>
 This Function converts dateTime.Now  of server into dateTime.Now of IST time zone.
 </summary>
 <returns>Current date in IST</returns>
</member>
<member name="M:DataFunctions.DataFunctions.GetDateTimeUTCNow">
 <summary>
 This function converts dateTime.Now of server into dateTime.Now of UTC time.
 </summary>
 <returns>Current date in UTC</returns>
</member>
<member name="M:DataFunctions.DataFunctions.ConvertDateTimeUTC_IST(System.DateTime,System.String)">
 <summary>
 This function will convert date from IST to UTC or viceversa. Date argument should be either in IST or UTC time zone.
 </summary>
 <param name="dt">Date to be converted. If Zone is IST then it should be in UTC timezone and viceversa </param>
 <param name="zone">Zone is the time zone in which dt is to be converted. It can only be IST or UTC</param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowInDataTable(System.Data.DataTable@,System.Collections.Hashtable,System.Collections.Hashtable)">
 <summary>
 To add row in data table ,whoose column values are given as hash table
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="ColumnValues">ColumnValues as hashtable where key is columnname and value is its content</param>
 <param name="CheckColumnValues">Check wether row exists for specified columns of separate hash table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowInDataTable(System.Data.DataTable@,System.Int32,System.Collections.Hashtable)">
 <summary>
 To add row in data table ,whoose column values are given as hash table
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="RepeatRowAsNew">RowNo whoose ColumnValues will be repeated</param>
 <param name="ReplacedColumnValues">ColumnValues as hash table to be replaced,Key is columnname,Value is column value</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowIdColumnInDataTable(System.Data.DataTable@,System.String)">
 <summary>
 To add a row-id column in each rows of datatable , corressponding row-nos.
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="RowIdColumnName">ColumnName to hold row nos.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowInDataTable(System.Data.DataTable@,System.Data.DataRow,System.Collections.Hashtable)">
 <summary>
 To add row in data table ,whoose column values are given as hash table
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="RepeatRowAsNew">DataRow  whoose ColumnValues will be repeated</param>
 <param name="ReplacedColumnValues">ColumnValues as hash table to be replaced,Key is columnname,Value is column value</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowInDataTable(System.Data.DataTable@,System.Data.DataRow,System.Boolean)">
 <summary>
 To add row in data table ,whoose column values are given as hash table
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="NewDataRow">DataRow  which is added to datatable.</param>
 <param name="NoAdditionIfExists">If row exists, no datarow will be added</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddRowInDataTable(System.Data.DataTable@,System.Data.DataRow[],System.Boolean)">
 <summary>
 To add row in data table ,whoose column values are given as hash table
 </summary>
 <param name="LDataTable">Data table in which rows are to be added</param>
 <param name="DataRowsArray">An array of DataRows  which is added to datatable.</param>
 <param name="NoAdditionIfExists">If row exists, no datarow will be added</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AssignValuesToRow(System.Data.DataRow,System.Collections.Hashtable)">
 <summary>
 To assign column values to a data row 
 </summary>
 <param name="BaseRow" >DataRow inwhich values to assigned</param>
 <param name="ColumnValues" >ColumnValues as hashtable, with key as columnname and value as columnvalue</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AssignValuesToRow(System.Data.DataRow,System.String[],System.Object[])">
 <summary>
 To assign column values to a data row 
 </summary>
 <param name="BaseRow" >DataRow inwhich values to assigned</param>
 <param name="ColumnNames" >Column names as string array</param>
 <param name="ColumnValues" >Column Values as object array</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddColumnsInDataTable(System.Data.DataTable@,System.String,System.String,System.String,System.String)">
 <summary>
 To add columns  in data table 
 </summary>
 <param name="LDataTable">Data table in which columns  are to be added</param>
 <param name="ColumnNames">Comma separated ColumnNames or (ColumnNames#ColumnTypes) as string></param>
 <param name="ColumnTypes">Comma separated system.types as string eg system.string,system.decimal,system.int16,system.int32,system.byte[] etc</param>
 <param name="ColumnsAfter">Existing ColumnName after which columns added</param>
 <param name="ColumnsBefore">Existing ColumnName before which columns added</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetColumnValuesFromRow(System.Data.DataRow,System.String)">
 <summary>
 To get an array objects of given comma separated columns of a datarow 
 </summary>
 <param name="LdataRow">DataRow of columns</param>
 <param name="LcolumnNames">Comma separated string of column names</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetColumnValuesFromRowAsString(System.Data.DataRow,System.String)">
 <summary>
 To get a comma separated string values  of comma separated columns of a datarow 
 </summary>
 <param name="LdataRow">DataRow of columns</param>
 <param name="LcolumnNames">Comma separated string of column names</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelFromDataTable(System.Data.DataTable@,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Create an excel worksheet by a datatable
 </summary>  
 <param name="LdataTable">DataTable to be exported as work sheet</param>
 <param name="OutputExcelFile">Full identifier of excel sheet</param>
 <param name="LeaveColumns" >Comma separated columns name which are not transfered</param>
 <param name="AutoFitColumnSize" >True</param>
 <param name="toprows" >No of toprows of datatable to be taken,0 for all</param>
 <param name="bottomrows">No of bottom row of datatable to be taken,0 for all</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelFromSql(System.String@,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Create an excel worksheet by a datatable
 </summary>  
 <param name="ServerDataBase">ServerDataBase</param>
 <param name="Ltable"></param>
 <param name="OutputExcelFile">Full identifier of excel sheet</param>
 <param name="LeaveColumns" >Comma separated columns name which are not transfered</param>
 <param name="AutoFitColumnSize" >True</param>
 <param name="toprows" >No of toprows of datatable to be taken,0 for all</param>
 <param name="bottomrows">No of bottom row of datatable to be taken,0 for all</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelXMLFromDataTable(System.Data.DataTable@,System.String,System.String)">
 <summary>
 Create an excel worksheet by a datatable
 </summary>  
 <param name="LdataTable">DataTable to be exported as closedxml work  sheet</param>
 <param name="OutputExcelFile">Full identifier of excel sheet</param>
 <param name="LeaveColumns" >Comma separated columns name which are not transfered</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelHeaders(System.Data.DataTable,System.String,System.Collections.Hashtable@)">
 <summary>
 Create an empty excel WorkSheet With Column Headers specified in hashtable
 </summary>
 <param name="LDataTable">DataTable to be converted into excelsheet</param>
 <param name="LeaveColumns"></param>
 <param name="HeaderHash">A HashTable having  keys as  columnname of datatable and value as headertext for excel  </param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelXMLHeaders(System.Data.DataTable,System.String,System.Collections.Hashtable@)">
 <summary>
 Create an empty closedxml excel WorkSheet With Column Headers specified in hashtable
 </summary>
 <param name="LDataTable">DataTable to be converted into excelsheet</param>
 <param name="LeaveColumns"></param>
 <param name="HeaderHash">A HashTable having  keys as  columnname of datatable and value as headertext for excel  </param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertValuesInWorkSheetArray(System.Data.DataTable@,System.Data.DataTable@,System.Data.DataTable@,System.Int16@,System.Int16@,System.Int16@,System.Object[0:,0:]@,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Insert cell values from valuesdt specified in partofsection datatable (Part of  section of report control datatable 
 </summary>
 <param name="dtstyle">datatable having cell styles "StyleName#String,rowno#Integer,colno#Integer,ColType#Integer,VarType#Integer,StyleVal#String"</param>
<param name="ValuesDt">A datatable having  'VarName,VarValue as columns having values of @var1,@var2 etc. valuesdt (Index on VarName).</param>
<param name="PartOfSection">Output format Datatable Having properties of worksheet cells </param>
<param name="PrevRowNo"></param>
<param name="PrevColNo"></param>
<param name="Part_no"></param>
<param name="isRowFont"></param>
<param name="isRowBack"></param>
<param name="isRowFore"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertValuesInWorkSheet(Microsoft.Office.Interop.Excel.Worksheet@,System.Data.DataTable@,System.Data.DataTable@,System.Int16@,System.Int16@,System.Int16@,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Insert cell values from valuesdt specified in partofsection datatable (Part of  section of report control datatable 
 </summary>
 <param name="ws">Worksheet to be filled</param>
<param name="ValuesDt">A datatable having  'VarName,VarValue as columns having values of @var1,@var2 etc. valuesdt (Index on VarName).</param>
<param name="PartOfSection">Output format Datatable Having properties of worksheet cells </param>
<param name="PrevRowNo"></param>
<param name="PrevColNo"></param>
<param name="Part_no"></param>
<param name="isRowFont"></param>
<param name="isRowBack"></param>
<param name="isRowFore"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertValuesInXMLWorkSheet(ClosedXML.Excel.IXLWorksheet@,System.Data.DataTable@,System.Data.DataTable@,System.Int16@,System.Int16@,System.Int16@,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Insert cell values in closedxml worksheet from valuesdt specified in partofsection datatable (Part of  section of report control datatable 
 </summary>
 <param name="ws">Worksheet to be filled</param>
<param name="ValuesDt">A datatable having  'VarName,VarValue as columns having values of @var1,@var2 etc. valuesdt (Index on VarName).</param>
<param name="PartOfSection">Output format Datatable Having properties of worksheet cells </param>
<param name="PrevRowNo"></param>
<param name="PrevColNo"></param>
<param name="Part_no"></param>
<param name="isRowFont"></param>
<param name="isRowBack"></param>
<param name="isRowFore"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertColumnStylesInWorkSheet(Microsoft.Office.Interop.Excel.Worksheet@,System.Data.DataTable@,System.Int16,System.Int16,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Insert cell values from valuesdt specified in partofsection datatable (Part of  section of report control datatable 
 </summary>
 <param name="ws">Worksheet to be filled</param>
<param name="PartOfSection">Output format Datatable Having properties of worksheet cells </param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertColumnStylesInXMLWSheet(ClosedXML.Excel.IXLWorksheet@,System.Data.DataTable@,System.Int16,System.Int16,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Insert cell values from valuesdt specified in partofsection datatable (Part of  section of report control datatable 
 </summary>
 <param name="ws">Worksheet to be filled</param>
<param name="PartOfSection">Output format Datatable Having properties of worksheet cells </param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelWorkSheet(Microsoft.Office.Interop.Excel.Application@,Microsoft.Office.Interop.Excel.Workbook@,System.String)">
 <summary>
 Create an empty excel WorkSheet  
 </summary>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelXMLWorkSheet(ClosedXML.Excel.XLWorkbook@,System.String)">
 <summary>
 Create an empty excel WorkSheet  
 </summary>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableInToExcel(System.Data.DataTable@,System.String,System.Int32,System.String,System.Int32)">
 <summary>
 Insert Datatable into excel worksheet on a specific location.
 </summary>  
 <param name="LdataTable">DataTable to be exported as work sheet</param>
 <param name="ExcelFile">Full identifier of excel file to be inserted</param>
 <param name="InsertOn" >RowNo of excel from where insertion done.</param>
 <param name="SheetName"></param>
 <param name="dtrownstart"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataTableToExcelXML(System.Data.DataTable@,System.String,System.Int32,System.String,System.Int32)">
 <summary>
 Insert Datatable into excel worksheet on a specific location.
 </summary>  
 <param name="LdataTable">DataTable to be exported as work sheet</param>
 <param name="ExcelFile">Full identifier of excel file to be inserted</param>
 <param name="InsertOn" >RowNo of excel from where insertion done.</param>
 <param name="SheetName"></param>
 <param name="dtrownstart"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataRowInToExcel(System.Data.DataRow@,System.String,System.Int32,System.String)">
 <summary>
 Insert Datarow into excel worksheet on a specific location.
 </summary>  
 <param name="LDataRow">DataRow  to be inseted in to  work sheet</param>
 <param name="ExcelFile">Full identifier of excel file to be inserted</param>
 <param name="InsertOn" >RowNo of excel from where insertion done.</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertDataRowInToExcelXML(System.Data.DataRow@,System.String,System.Int32,System.String)">
 <summary>
 Insert Datarow into excel worksheet on a specific location.
 </summary>  
 <param name="LDataRow">DataRow  to be inseted in to  work sheet</param>
 <param name="ExcelFile">Full identifier of excel file to be inserted</param>
 <param name="InsertOn" >RowNo of excel from where insertion done.</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertValuesInToExcel(System.String,System.Data.DataTable@,System.String)">
 <summary>
 Insert CellValues into excel worksheet on a specific location.
 </summary>  
 <param name="ExcelFile">Full identifier of excel sheet</param>
 <param name="DtRowColValues" >A datatable having columns RowNos,Colnos and CellValues to be inserted into excel .</param>
 <param name="SheetName">Sheet Name </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertValuesInToExcelXML(System.String,System.Data.DataTable@,System.String)">
 <summary>
 Insert CellValues into excel worksheet on a specific location.
 </summary>  
 <param name="ExcelFile">Full identifier of excel sheet</param>
 <param name="DtRowColValues" >A datatable having columns RowNos,Colnos and CellValues to be inserted into excel .</param>
 <param name="SheetName">Sheet Name </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetValuesFromExcel(System.String,System.Data.DataTable@,System.String@,System.String)">
 <summary>
 Insert Datatable into excel worksheet on a specific location.
 </summary>  
 <param name="ExcelFile">Full identifier of excel sheet</param>
 <param name="DtRowColValues" >A datatable having columns RowNos,Colnos and CellValues to be received from excel .</param>
 <param name="ContentType">value or formula</param>
 <param name="SheetName">Sheet Name </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetValuesFromExcelXML(System.String,System.Data.DataTable@,System.String@,System.String)">
 <summary>
 Insert Datatable into excel worksheet on a specific location.
 </summary>  
 <param name="ExcelFile">Full identifier of excel sheet</param>
 <param name="DtRowColValues" >A datatable having columns RowNos,Colnos and CellValues to be received from excel .</param>
 <param name="ContentType">value or formula</param>
 <param name="SheetName">Sheet Name </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsRangeFromExcel(System.String,System.Int32,System.Int32,System.String)">
 <summary>
 Remove a range of  Rows from a excel sheet.
 </summary>
 <param name="ExcelFile"></param>
 <param name="StartRowNo"></param>
 <param name="EndRowNo"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsRangeFromExcelXML(System.String,System.Int32,System.Int32,System.String)">
 <summary>
 Remove a range of  Rows from a excel sheet.
 </summary>
 <param name="ExcelFile"></param>
 <param name="StartRowNo"></param>
 <param name="EndRowNo"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsRangeFromExcel(System.String,System.Collections.Generic.List{System.Int32},System.String)">
 <summary>
 Remove a range of  Rows from a excel sheet.
 </summary>
 <param name="ExcelFile"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.RemoveRowsRangeFromExcelXML(System.String,System.Collections.Generic.List{System.Int32},System.String)">
 <summary>
 Remove a range of  Rows from a closedxml.excel sheet.
 </summary>
 <param name="ExcelFile"></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetRowNosFromExcel(System.String,System.Collections.Hashtable,System.String)">
 <summary>
 Get RowNos from excel which satisfied a given condition in Hashtable,Key=ColumnName,Value=KeyValue.
 </summary>
 <param name="InputExcelFile"></param>
 <param name="HashCondition"></param>
 <param name="SheetName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataTableFromExcel(System.String)">
 <summary>
 Create a datatable from excel worksheet -1 without using ADO.NET
 </summary>  
 <param name="InputExcelFile">Full identifier of excel sheet</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDataTableFromExcelXML(System.String,System.String)">
 <summary>
 Create a datatable from excel worksheet -1 without using ADO.NET
 </summary>  
 <param name="InputExcelFile">Full identifier of excel sheet</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateDelimitedTxtFileFromDataTable(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Create a delimited text file from a datatable
 </summary>  
 <param name="LdataTable">DataTable to be exported as delimited text file.</param>
 <param name="OutputTextFile">Full identifier of delimited text file</param>
 <param name="Delimiter" >Delimiter as character default is ","</param>
 <param name="LeaveColumns" >Comma separated columns name which are not transfered</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelFromDataTable(System.Data.DataTable@,System.String,System.Data.DataTable,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String[],System.Boolean)">
 <summary>
 Create an excel worksheet by a datatable
 </summary>
 <param name="LdataTable">DataTable to be exported as work sheet</param>
 <param name="OutputExcelFile">Full identifier of excel sheet</param>
 <param name="DtColumnNames" >DataTable having Column names descriptions </param>
 <param name="KeyField1" >Key Field name of DtColumnNames for searching of description of columnns of ldatatable</param>
 <param name="DescriptionField1" >Field name of dtcolumnnames holding column descriptions</param>
 <param name="DtColumnValues" >DataTable having cell value corresponding to column code</param>
 <param name="KeyField2" >Comma separated key fields for dtcolumnvalues,key is combination of two values i.e columnname and cellvalue of ldatatable</param>
 <param name="DescriptionField2" >field name of description of columnvalues strored in cells</param>
 <param name="LeaveColumns" >An array of column names witch are not transfered to excel worksheet</param>
 <param name="AutoFitColumnSize" ></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateExcelXMLFromDataTable(System.Data.DataTable@,System.String,System.Data.DataTable,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String[],System.Boolean)">
 <summary>
 Create an excel worksheet by a datatable
 </summary>
 <param name="LdataTable">DataTable to be exported as work sheet</param>
 <param name="OutputExcelFile">Full identifier of excel sheet</param>
 <param name="DtColumnNames" >DataTable having Column names descriptions </param>
 <param name="KeyField1" >Key Field name of DtColumnNames for searching of description of columnns of ldatatable</param>
 <param name="DescriptionField1" >Field name of dtcolumnnames holding column descriptions</param>
 <param name="DtColumnValues" >DataTable having cell value corresponding to column code</param>
 <param name="KeyField2" >Comma separated key fields for dtcolumnvalues,key is combination of two values i.e columnname and cellvalue of ldatatable</param>
 <param name="DescriptionField2" >field name of description of columnvalues strored in cells</param>
 <param name="LeaveColumns" >An array of column names witch are not transfered to excel worksheet</param>
 <param name="AutoFitColumnSize" ></param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.BeginTransaction(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 To start an sql  transaction.
 </summary>
 <param name="ServerDataBase"></param>
 <param name="mIsolationLevel" ></param>
 <param name="MaxPoolSize"></param>
 <param name="ConnectionTimeOut"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.BeginTransactionBySqlId(System.String,System.String,System.Int32,System.Int32)">
 <summary>
 To start an sql  transaction.
 </summary>
 <param name="FullSqlIdentifier"></param>
 <param name="mIsolationLevel" ></param>
 <param name="MaxPoolSize"></param>
 <param name="ConnectionTimeOut"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CommitTransaction(System.Data.SqlClient.SqlTransaction@,System.String,System.Collections.Hashtable[]@)">
 <summary>
 Function to commit transanction or rollback.
 </summary>
 <param name="Mtrans">Transanction object</param>
 <param name="LastKeyPlusInTransaction" >An array of hashtable having LastKeyPlus  values involved in this transaction.</param>
 <param name="TransName">Name of transanction supplied for identification</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.BeginTransaction(System.Data.SqlClient.SqlConnection@,System.String)">
 <summary>
 To start an sql transanction.
 </summary>
 <param name="LConnection"></param>
 <param name="mIsolationLevel" ></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.AddUpperNodeColumns(System.Data.DataTable@,System.Data.DataTable,System.String,System.Int16@,System.String)">
 <summary>
 Add upper node columns to a datatable,which has upper key in UpperNodeField  eg Town,District,State,Country.
 </summary>
 <param name="LdataTable">DataTable with upperNode field and on which columns to be added</param>
 <param name="SourceNodes" >DataTable having primary keys of all uppernodes</param>
 <param name="UpperNodeField">Name of field which has group value of datarow.</param>
 <param name="TotalColumnsAdded">No. of columns to be added.</param>
 <param name="NewColumnNames">Comma separated column Names to be added</param>
 <returns>New data table with new columns and values</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateTreeView(System.Data.DataTable@,System.String,System.String,System.String,System.Windows.Forms.TreeView@,System.String)">
 <summary>
 Create a treeview object from a datatable having a hierarchical strucure fields,eg. ParentField,ChildField,NodeTextField and other fields attatched in tag.
 </summary>
 <param name="LdataTable">Data table from which tree created</param>
 <param name="ChildField">Primary key field of datatable </param>
 <param name="ParentField">Field name contains the parent key field of datarow</param>
 <param name="NodeTextField">Text field name which is shown as node.text</param>
 <param name="OtherDisplayfields">Other Fields value stored in treeview.tag</param>
 <param name="TreeViewObject" >A TreeView Object sent by reference with other initial property settings.</param>
 <returns>Tree View object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetTreeNodeDetail(System.Windows.Forms.TreeNode)">
 <summary>
 Get associated Tag details  of a TreeNode object
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.IsDataRowEmpty(System.Data.DataRow)">
 <summary>
 Check wether a datarow has all fields empty.
 </summary>
 <param name="LDataRow">DataRow to be checked</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertForNewTownInInfoTable(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Collections.Hashtable)">
 <summary>
  Insert rows in CurrRowArray in table class object for new country,state,district,town for later sql stmt. execution.
 
 </summary>
 <param name="MyTrans">Sql Transanction</param>
 <param name="ClsTownTable">Class of info table</param>
 <param name="HashTownDetails">Hash table of inserting values keys are Country,CountryKey,State,StateKey,District,DistrictKey,HomwTown,HomeTownKey</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCurrRowArrayIfNewInsert(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Collections.Hashtable,System.String)">
 <summary>
  Insert rows in CurrRowArray in table class object if new record is selected by the user for later sql stmt. execution.
 </summary>
 <param name="MyTrans">Sql Transanction </param>
 <param name="ClsInfoTable">Class of table</param>
 <param name="HashInfoDetails">Hash table of inserting values with extra keys are  "NewRowFlag" =true,and "KeyValue" as primary key value  </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetCurrRowArrayIfNewUchkInsert(System.Data.SqlClient.SqlTransaction@,System.Object@,System.Collections.Hashtable,System.String)">
 <summary>
  Insert rows in CurrRowArray in table class object if new record is selected by the user for later sql stmt. execution.
 </summary>
 <param name="MyTrans">Sql Transanction </param>
 <param name="ClsInfoTable">Class of table</param>
 <param name="HashInfoDetails">Hash table of inserting values with extra keys are  "NewRowFlag" =true,and "KeyValue" as primary key value  </param>
 <param name="mKeyField" >Key name  of hashtable ,whose value assigned to maintable</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetKeyValueIfNewInsert(System.Data.SqlClient.SqlTransaction@,System.Object[]@)">
 <summary>
  Insert rows in CurrRowArray in table class object if new record is selected by the user for later sql stmt. execution.
 </summary>
 <param name="MyTrans">Sql Transanction </param>
 <param name="ClsTables">Class of table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.FormattedDisplayValue(System.Object@)">
 <summary>
 Convert fieldvalue to formatted value in diffrent FRMT prefixed fieldname.
 </summary>
 <param name="ClsObject"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ValidateControlValue(System.String,System.Object[]@,System.Collections.Hashtable,System.String)">
 <summary>
 Validate  Values of control.
 </summary>
 <param name="ValidationExpression">Control Value  validator (Condition1 $ message1)!((Condition2 $ message2)!((Condition3$message3)</param>
 <param name="PublicHashValues" >Hash Table having Public variables</param>
 <param name="aclsObject" >Array of all instance used in the form </param>
 <returns>Return message if condition is true </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ValidateValuessOnFormSubmit(System.Object@,System.Object[]@,System.Collections.Hashtable@)">
 <summary>
 Validate  Values of control.
 </summary>
 <param name="VoFormClass" >VO of VoFormClass objects </param>
 <param name="PublicHashValues" >Hash Table having Public variables</param>
 <param name="AllInstanceClasses" >Array of All InstanceClasses used in the form</param>
 <returns>Return  row index of First Invalid value control in VOFormClass and all invalid messages , separated by pipe</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.ReverseDataTable(System.Data.DataTable,System.Boolean)">
 <summary>
 Reverse Rows of a DataTable. i.e. LastRow becomes FirstRow.
 </summary>
 <param name="mDataTabale">DataTable to be reversed</param>
 <param name="Row_IdColumn">True if datatable contains Row_Id column.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DataTableToString(System.Data.DataTable,System.Object,System.Object,System.String,System.Boolean)">
 <summary>
 Convert a datatable into string with or without ColumnNames.String started with chrw(248) if columnheaders present in the string. 
 </summary>
 <param name="FileDt">DataTable for which output string is to be obtained</param>
 <param name="mColumnsSeparator">Separator used to separate different column values.Default is |</param>
 <param name="mRowsSeparator" >Separator used to separate different column values.Default is chrw(13)</param>
 <param name="ExcludeFields">, separated string of Columns to be Excluded while creating string</param>
 <param name="mHeader">Indicates whether columnnames of the data table  to be saved on not on first row position.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.DataRowToString(System.Data.DataRow,System.Object,System.Object,System.String,System.Boolean)">
 <summary>
 Convert a datatRow into string with or without ColumnNames.Columnames and row itemarray  seperated by carriage return. 
 </summary>
 <param name="FileRw">DataRow for which output string is to be obtained</param>
 <param name="mColumnsSeparator">Separator used to separate different column values.Default is |</param>
 <param name="mRowsSeparator" >Separator used to separate different row values.Default is chrw(13)</param>
 <param name="ExcludeFields">Comma separated string of Columns to be Excluded while creating string</param>
 ''' <param name="mHeader">Indicates whether Heading of the table is to be saved on not.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.StringToDataTable(System.String,System.String,System.String,System.Data.DataTable)">
 <summary>
 To make a datatable object from a string protocol,string starts with chrw(248) or "h!",if header exists
 </summary>
 <param name="InputString">Input string from which data is to be converted into datatable</param>
 <param name="mColumnsSeparator" >Separator used to separate different column values.Default is |</param>
 <param name="mRowsSeparator" >Separator used to separate different column values.Default is chrw(13)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.StringToDataTableList(System.String,System.String[],System.String,System.String)">
 <summary>
 To make a dataSet object from a string protocol,Lines starts with elements from string array eg {"HH","LL","FF"} to identify separate rows of  datatables of dataset
 </summary>
 <param name="InputString">Input string from which data is to be converted into datatable</param>
 <param name="LinesStartArray">An string array eg {"HH","LL","FF"} to identify separate rows of  datatables of dataset</param>
 <param name="mColumnsSeparator" >Separator used to separate different column values.Default is |</param>
 <param name="mRowsSeparator" >Separator used to separate different column values.Default is chrw(13)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.StringToDataRow(System.String,System.String,System.String)">
 <summary>
 To make a datarow object from a string protocol,string starts with chrw(248) or "h!",if header exists
 </summary>
 <param name="InputString">Input string from which data is to be converted into datatable</param>
 <param name="mColumnsSeparator" >Separator used to separate different column values.Default is |</param>
 <param name="mRowsSeparator" >Separator used to separate different column values.Default is chrw(13)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.KeywordsDataTableFromString(System.String,System.String,System.String)">
 <summary>
 Convert string layout (KeywordName1+chrw(217)+KewwordValue1+chrw(217)+KeywordType1+chrw(218)+KeywordName2+chrw(217)+KewwordValue2+chrw(217)+KeywordType2 into datatable with columns KeywordName,KewwordValue,KeywordType
 </summary>
 <param name="InputString">Input string KeywordName1+chrw(217)+KewwordValue1+chrw(217)+KeywordType1+chrw(218)+KeywordName2+chrw(217)+KewwordValue2+chrw(217)+KeywordType2 into datatable with columns KeywordName,KewwordValue,KeywordType </param>
 <param name="VarHook">  Keywords separator default is chrw(218)</param>
 <param name="ValHook">Separator of name,value,type,default is chrw(217)</param>
 <returns> Hash Table object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.KeywordsDataTableToString(System.Data.DataTable,System.String,System.String)">
 <summary>
 Convert Kewwords data table into string layout (KeywordName1+chrw(217)+KewwordValue1+chrw(217)+KeywordType1+chrw(218)+KeywordName2+chrw(217)+KewwordValue2+chrw(217)+KeywordType2 into datatable with columns KeywordName,KewwordValue,KeywordType
 </summary>
 <param name="InputKeywordTable">Input string KeywordName1+chrw(217)+KewwordValue1+chrw(217)+KeywordType1+chrw(218)+KeywordName2+chrw(217)+KewwordValue2+chrw(217)+KeywordType2 into datatable with columns KeywordName,KewwordValue,KeywordType </param>
 <param name="VarHook">  Keywords separator default is chrw(218)</param>
 <param name="ValHook">Separator of name,value,type,default is chrw(217)</param>
 <returns> Hash Table object</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetStringConditionFromHashTable(System.Collections.Hashtable,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Convert hashtable object into string
 </summary>
 <param name="InputHashTable"> Input hash table object</param>
 <param name="LogicGate" >Logic gate placed between two columns default is " and "</param>
 <param name="SqlStringFormat" >Optional if True, String values are converted with single quotes otherwise with double quotes.</param>
 <param name="LogicalOperator" > any logical operator default value  "=" , not equal to symbol ,less than symbol,greater than symbol </param>
 <returns>Output condition string  </returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetColumnContentsFromDataTable(System.Data.DataTable,System.String,System.String)">
 <summary>
 Get Column contents as List  (of string) control  from a datatable.
 </summary>
 <param name="Dtable"></param>
 <param name="ColumnName"></param>
 <param name="Lwhere"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetColumnContentsFromDataTable(System.Data.DataTable,System.String,System.Collections.Hashtable)">
 <summary>
 Get Column contents as List  (of string) control  from a datatable.
 </summary>
 <param name="Dtable"></param>
 <param name="ColumnName"></param>
 <param name="Lwhere"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetDuplicateRows(System.Data.DataTable,System.String)">
 <summary>
 Get Duplicate rows in  a datatable based of columns.
 </summary>
 <param name="ldatatable"></param>
 <param name="pColumns">Comma separated column names on which duplicate rows to be found</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFontExcelCells(System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Set  Font object from Font string type FontName~FontSize~FontStyle1~FontStyle2|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)into excel object
 </summary>
 <param name="FontString">Font string type FontName~FontSize~FontStyle1~FontStyle2|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 eg. (Microsoft Sans Serif~10~Regular|1~5~7~9)> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFontExcelXMLCells(System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Set  Font object from Font string type FontName~FontSize~FontStyle1~FontStyle2|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)into excel object
 </summary>
 <param name="FontString">Font string type FontName~FontSize~FontStyle1~FontStyle2|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 eg. (Microsoft Sans Serif~10~Regular|1~5~7~9)> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetExcelRangeFromCells(System.String,System.Int16,System.Int16)">
 <summary>
 convert  CellsString as Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)to Excel Range eg (1~1~10~3) to A1:C10
 </summary>
 <param name="CellsString">Font string type FontName~FontSize~FontStyle1~FontStyle2|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 eg. (Microsoft Sans Serif~10~Regular|1~5~7~9)> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFontExcelRange(System.String[],Microsoft.Office.Interop.Excel.Worksheet@,System.String)">
 <summary>
 Set  Font object from Font string type FontName~FontSize~FontStyle1~FontStyle2 into excel object
 </summary>
 <param name="mfont">Font string type FontName~FontSize~FontStyle1~FontStyle2|> </param>
 <param name="ws">worksheet</param>
 <param name="mRange">excel range string egf A1:C3 </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFontExcelXMLRange(System.String[],ClosedXML.Excel.IXLWorksheet@,System.String)">
 <summary>
 Set  Font object from Font string type FontName~FontSize~FontStyle1~FontStyle2 into excel object
 </summary>
 <param name="mfont">Font string type FontName~FontSize~FontStyle1~FontStyle2|> </param>
 <param name="ws">worksheet</param>
 <param name="mRange">excel range string egf A1:C3 </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetColorExcelCells(System.Int16,System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Set  color  from  strings type 1=ForeColor or 0=BackColor ,A~R~G~B|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol) into excel object
 </summary>
 <param name="ColorType">1=ForeColor or 0=BackColor</param>
 <param name="ColorString">color string A~R~G~B|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <param name="ws">ws</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetColorExcelXMLCells(System.Int16,System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Set  color  from  strings type 1=ForeColor or 0=BackColor ,A~R~G~B|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol) into excel object
 </summary>
 <param name="ColorType">1=ForeColor or 0=BackColor</param>
 <param name="ColorString">color string A~R~G~B|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <param name="ws">ws</param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetColorExcelRange(System.Int16,System.String[],Microsoft.Office.Interop.Excel.Worksheet@,System.String)">
 <summary>
 Set  color  from  strings type 1=ForeColor or 0=BackColor A~R~G~B into excel object
 </summary>
 <param name="ColorType">type 1=ForeColor or 0=BackColor</param>
 <param name="margb">Color  string  A~R~G~B> </param>
 <param name="mRange">excel range string egf A1:C3 </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetColorExcelXMLRange(System.Int16,System.String[],ClosedXML.Excel.IXLWorksheet@,System.String)">
 <summary>
 Set  color  from  strings type 1=ForeColor or 0=BackColor A~R~G~B into excel object
 </summary>
 <param name="ColorType">type 1=ForeColor or 0=BackColor</param>
 <param name="margb">Color  string  A~R~G~B> </param>
 <param name="mRange">excel range string egf A1:C3 </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CellsStringToInteger(System.String,System.Int16,System.Int16)">
 <summary>
 Convert CellsString type (Startcellrow~StartcellCol~LastcellRow~LastcellCol) into integer array (r1,c1,r2,c2) 
 </summary>
 <param name="CellsString">CellsString as Startcellrow~StartcellCol~LastcellRow~LastcellCol(If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)</param>
 <param name="PrevRow"></param>
 <param name="PrevCol"></param>
 <returns></returns>
</member>
<member name="M:DataFunctions.DataFunctions.MergeExcelCells(System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Cells to be merged in excel string in the format(FirstcellRowNo~FirstcellColNo~LastcellRowNo~LastcellColNo)(If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="CellsString"></param>
 <param name="Ws">Workshhet as excel.workshhet</param>
 <param name="PrevRow"></param>
 <param name="PrevCol"></param>
</member>
<member name="M:DataFunctions.DataFunctions.MergeExcelXMLCells(System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Cells to be merged in excel string in the format(FirstcellRowNo~FirstcellColNo~LastcellRowNo~LastcellColNo)(If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="CellsString"></param>
 <param name="Ws">Workshhet as excel.workshhet</param>
 <param name="PrevRow"></param>
 <param name="PrevCol"></param>
</member>
<member name="M:DataFunctions.DataFunctions.BorderExcelCells(System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Cells to be bordered in excel string in the format(BorderWidth|FirstcellRowNo~FirstcellColNo~LastcellRowNo~LastcellColNo)(If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="borderCellsString"></param>
 <param name="Ws">Workshhet as excel.workshhet</param>
 <param name="PrevRow"></param>
 <param name="PrevCol"></param>
</member>
<member name="M:DataFunctions.DataFunctions.BorderExcelXMLCells(System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Cells to be bordered in excel string in the format(BorderWidth|FirstcellRowNo~FirstcellColNo~LastcellRowNo~LastcellColNo)(If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="borderCellsString"></param>
 <param name="Ws">Workshhet as excel.workshhet</param>
 <param name="PrevRow"></param>
 <param name="PrevCol"></param>
</member>
<member name="M:DataFunctions.DataFunctions.SetAlignmentExcelRange(System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Set  horizontal alignment in the cells string type 0=Left,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 into excel object (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="AlignString">string type 0=Left,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetAlignmentExcelXMLRange(System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Set  horizontal alignment in the cells string type 0=Left,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 into excel object (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)
 </summary>
 <param name="AlignString">string type 0=Left,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetAlignmentExcelXMLCell(System.Int16,ClosedXML.Excel.IXLCell@)">
 <summary>
 Set  horizontal alignment in the cells string type 0=Left,1=Right,2=Centered
 </summary>
 <param name="AlignType">string type 0=Left,1=Right,2=Centered> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetAlignmentExcelCell(System.Int16,System.Object@)">
 <summary>
 Set  horizontal alignment in the cells string type 0=Left,1=Right,2=Centered
 </summary>
 <param name="AlignType">string type 0=Left,1=Right,2=Centered> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFormatExcelCells(System.String,Microsoft.Office.Interop.Excel.Worksheet@,System.Int16,System.Int16)">
 <summary>
 Set  formats for numreric or date type  cells string type 1=NLeft,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)into excel object
 </summary>
 <param name="FormatString">string type StringFormat|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.SetFormatExcelXMLCells(System.String,ClosedXML.Excel.IXLWorksheet@,System.Int16,System.Int16)">
 <summary>
 Set  formats for numreric or date type  cells string type 1=NLeft,1=Right,2=Centered|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2 (If rownos are negative in string add with prevrow  parameter,If colnos are negative in string add with prevcol)into excel object
 </summary>
 <param name="FormatString">string type StringFormat|Startcellrow1~StartcellCol~LastcellRow2~LastcellCol2> </param>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlus(System.String,System.String@,System.String)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format , if space or used table names are full identifier then this will extracted from full table name</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="FieldsWithCondition">Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3</param>
 <returns>List of lastvalue+1 of fieldname1,fieldName2,fieldname3</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlusRow(System.String,System.String@,System.String)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="ServerDataBase" >Full identifier of a database with server name eg. server0.database0 or _srv_0._mdf_0 format , if space or used table names are full identifier then this will extracted from full table name</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="FieldsWithCondition">Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3</param>
 <returns>A list of datarow with columns TableName,Schema,fieldName1,fieldname2....etc</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlus(System.Data.SqlClient.SqlTransaction@,System.String,System.String)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="FieldsWithCondition">Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3</param>
 <returns>List of lastvalue+1 of fieldname1,fieldName2,fieldname3</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlusRow(System.Data.SqlClient.SqlTransaction@,System.String,System.String)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="Ltable" >Sql Table name as string</param>
 <param name="FieldsWithCondition">Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3</param>
 <returns>A list of datarow with columns TableName,Schema,fieldName1,fieldname2....etc</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlusRow(System.Data.SqlClient.SqlTransaction@,System.Collections.Generic.List{System.Collections.Hashtable})">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="HashParamList" >List of Hashtable having keys are tablename,FieldsWithCondition(Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3)</param>
 <returns>A list of datarow with columns TableName,Schema,fieldName1,fieldname2....etc</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastFieldsPlus(System.Data.SqlClient.SqlTransaction@,System.Collections.Generic.List{System.Collections.Hashtable})">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="HashParamList" >List of Hashtable having keys are tablename,FieldsWithCondition(Field name and condition for lastkey convention FieldName1*Condition1~FieldName2*Condition2~FieldName3*Condition3)</param>
 <returns>List of lastvalue+1 of fieldname1,fieldName2,fieldname3</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CalcLastFields(System.Boolean,System.Data.SqlClient.SqlTransaction@,System.Collections.Generic.List{System.Collections.Hashtable},System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Data.DataRow}@)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="HashParamList" >Hashtable having keys are tablename,lastkeyfield,lcondition</param>
 <remarks>A list of datarow with columns TableName,Schema,fieldName1,fieldname2....</remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSqlTemplates(System.Data.SqlClient.SqlTransaction@,System.String)">
 <summary>
 To get increamental last key from an SQL Table
 </summary>
 <param name="Ltrans" >Sql Transaction</param>
 <param name="TableNames" >comma separated table names</param>
 <remarks>A list of one datarow of each table  with columns TableName,SchemaDt,fieldName1,fieldname2...etc.</remarks>
</member>
<member name="M:DataFunctions.DataFunctions.GetSqlTemplatesStr(System.String[]@)">
 <summary>
 To get sql string to get rowtempate and schemadt of tables
 </summary>
 <param name="atables" >array of table names</param>
 <remarks>Sql String to be executed </remarks>
</member>
<member name="M:DataFunctions.DataFunctions.LastKeyPlusSqlStr(System.Collections.Generic.List{System.Collections.Hashtable})">
 <summary>
 To get increamental last key sql statement  from a list of hashtables having keys are tablename,FieldsWithCondition (Fields and condition are separated with * and fieldwithconditions separated by ~
 </summary>
 <param name="HashParamList" >Hashtable having keys are tablename,lastkeyfield,lcondition</param>
 <remarks>A list of datarow with columns TableName,Schema,fieldName1,fieldname2....</remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Data.SqlClient.SqlCommand@,System.Data.DataRow,System.Int32,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="lcommand">sql command</param>
 <param name="mRow">row of values inserted</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Data.SqlClient.SqlCommand@,System.Collections.Generic.List{System.Data.DataRow},System.Int32,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="lcommand">sql command</param>
 <param name="mRowlist">rows to be  inserted</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CreateInsertQuery(System.Data.SqlClient.SqlCommand@,System.Collections.Generic.List{System.Data.DataRow},System.String,System.Data.DataTable@,System.Int32,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="lcommand">sql command</param>
 <param name="mRowlist">rows to be  inserted</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.CompositeQuery(System.Data.SqlClient.SqlCommand@,System.Collections.Generic.List{System.Collections.Hashtable}@)">
 <summary>
 Insert Records  to  multiple SQL Tables in a single batch execution.
 </summary>
 <param name="TablesHashList">A List of  hashtable haviing param of sql table's(Keys are tablename,RowStatusflag,OpenMode ,cueeRow,prevrow,Lwhere,ExcludeFields,TableType=H,M=HeaderTable,S=Subtable</param>
</member>
<member name="M:DataFunctions.DataFunctions.CreateUpdateString(System.Data.SqlClient.SqlCommand@,System.Data.DataRow@,System.Data.DataRow@,System.String,System.Data.DataTable,System.String,System.String,System.Int32,System.Int16)">
 <summary>
 Create a string query with sql parameters from a datarow to be inserted.
 </summary>
 <param name="lcommand">sql command</param>
 <param name="PrevRow"></param>
 <param name="CurrRow">row of values inserted</param>
 <param name="mTable">Table name</param>
 <param name="DtSchema">Schema of table</param>
 <param name="RowSNo">If sql command has more than one row then row no</param>
 <param name="TableNo">If sql command has more than one table than table no.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.UpdatedColumnsInDataRows(System.Data.DataRow@,System.Data.DataRow@,System.String@)">
 <summary>
 Compare two data rows 
 </summary>
 <param name="FirstDataRow">First data row to be compared</param>
 <param name="SecondDataRow">Second data row to be compared</param>
 <param name="ExcludeColumns" >Comma separated list of columns to be excluded for comparing datarows</param>
 <returns>List of mimatched columns</returns>
 <remarks></remarks>
</member>
<member name="M:DataFunctions.DataFunctions.InsertUpdateDeleteSqlByHashObject(System.Data.SqlClient.SqlTransaction@,System.Collections.Hashtable@)">
 <summary>
 Insert Records  to  SQL Tables in  rowwise batch execution.
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="TableHashObject">A hashtable haviing param of sql table's(Keys are tablename,RowStatusflag,OpenMode ,currRow,prevrow,Lwhere,ExcludeFields,TableType=H,M=HeaderTable,S=Subtable</param>
</member>
<member name="M:DataFunctions.DataFunctions.InsertUpdateDeleteSqlByHashObject(System.Data.SqlClient.SqlTransaction@,System.Collections.Generic.List{System.Collections.Hashtable}@)">
 <summary>
 Insert Records  to  SQL Tables in  rowwise batch execution.
 </summary>
 <param name="Ltrans" >sql transaction </param>
 <param name="TableHashList">A List of  hashtable haviing param of sql table's(Keys are tablename,RowStatusflag,OpenMode ,cueeRow,prevrow,Lwhere,ExcludeFields,TableType=H,M=HeaderTable,S=Subtable</param>
</member>
</members>
</doc>
